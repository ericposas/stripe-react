[{"C:\\Users\\EP\\Documents\\stripe-react\\src\\index.js":"1","C:\\Users\\EP\\Documents\\stripe-react\\src\\App.js":"2","C:\\Users\\EP\\Documents\\stripe-react\\src\\reportWebVitals.js":"3","C:\\Users\\EP\\Documents\\stripe-react\\src\\itemsList.js":"4","C:\\Users\\EP\\Documents\\stripe-react\\src\\productsList.js":"5","C:\\Users\\EP\\Documents\\stripe-react\\src\\Success.js":"6","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\StyledButton.js":"7","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\ProductBox.js":"8","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\Checkout.js":"9","C:\\Users\\EP\\Documents\\stripe-react\\src\\hooks\\useFetchedUserData.js":"10","C:\\Users\\EP\\Documents\\stripe-react\\src\\utils\\utils.js":"11","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\UpdateUserDataForm.js":"12","C:\\Users\\EP\\Documents\\stripe-react\\src\\hooks\\useAuthToken.js":"13","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\DrawerComponent.js":"14","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\ActionModal.js":"15","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\AppHeader.js":"16","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\ProfileDataPage.js":"17","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\BugerButton.js":"18","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\LogoutTimer.js":"19","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\CreditCardEntry.js":"20","C:\\Users\\EP\\Documents\\stripe-react\\src\\hooks\\useCreateStripeCustomer.js":"21","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\StripeCardEntryExample.js":"22","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\ChoosePaymentMethod.js":"23","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\AddressInputBox.js":"24"},{"size":735,"mtime":1611682596830,"results":"25","hashOfConfig":"26"},{"size":5083,"mtime":1612385545924,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"26"},{"size":2537,"mtime":1611467539130,"results":"29","hashOfConfig":"26"},{"size":57,"mtime":1611472459384,"results":"30","hashOfConfig":"26"},{"size":4480,"mtime":1611855402264,"results":"31","hashOfConfig":"26"},{"size":696,"mtime":1611984072974,"results":"32","hashOfConfig":"26"},{"size":1682,"mtime":1612218490977,"results":"33","hashOfConfig":"26"},{"size":13702,"mtime":1612218432729,"results":"34","hashOfConfig":"26"},{"size":1236,"mtime":1612382615199,"results":"35","hashOfConfig":"26"},{"size":410,"mtime":1612064592676,"results":"36","hashOfConfig":"26"},{"size":12215,"mtime":1612284731287,"results":"37","hashOfConfig":"26"},{"size":1472,"mtime":1611984245728,"results":"38","hashOfConfig":"26"},{"size":4453,"mtime":1612385600850,"results":"39","hashOfConfig":"26"},{"size":2195,"mtime":1612116718359,"results":"40","hashOfConfig":"26"},{"size":1024,"mtime":1611984072970,"results":"41","hashOfConfig":"26"},{"size":3521,"mtime":1612202928604,"results":"42","hashOfConfig":"26"},{"size":294,"mtime":1611807335603,"results":"43","hashOfConfig":"26"},{"size":2156,"mtime":1611854844319,"results":"44","hashOfConfig":"26"},{"size":2424,"mtime":1611860900891,"results":"45","hashOfConfig":"26"},{"size":2705,"mtime":1612362214661,"results":"46","hashOfConfig":"26"},{"size":14981,"mtime":1612218221310,"results":"47","hashOfConfig":"26"},{"size":3370,"mtime":1612064592665,"results":"48","hashOfConfig":"26"},{"size":9084,"mtime":1612385437579,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1d30jjv",{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"61"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"52"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"52"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"52"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"52"},"C:\\Users\\EP\\Documents\\stripe-react\\src\\index.js",[],["116","117"],"C:\\Users\\EP\\Documents\\stripe-react\\src\\App.js",["118"],"import React from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from 'react-router-dom'\r\nimport './App.css'\r\nimport SuccessPage from './Success'\r\nimport { useAuth0 } from '@auth0/auth0-react'\r\nimport Checkout from './components/Checkout'\r\nimport UpdateUserDataForm from './components/UpdateUserDataForm'\r\nimport ChoosePaymentMethod from './components/ChoosePaymentMethod'\r\nimport { DarkenDiv, DrawerLeftPanel } from './components/DrawerComponent'\r\nimport { ActionModal } from './components/ActionModal'\r\nimport AppHeader from './components/AppHeader'\r\nimport ProfileDataPage from './components/ProfileDataPage'\r\nimport BurgerButton from './components/BugerButton'\r\nimport LogoutTimer from './components/LogoutTimer'\r\nimport { Elements } from '@stripe/react-stripe-js'\r\nimport { loadStripe } from '@stripe/stripe-js'\r\nimport StripeCardEntryExample from './components/StripeCardEntryExample'\r\nimport AddressInputBox from './components/AddressInputBox'\r\n\r\nconst stripePromise = loadStripe(process.env.REACT_APP_STRIPE_TEST_PUB_KEY)\r\n\r\nfunction App() {\r\n  \r\n  const { user } = useAuth0()\r\n  const [drawerOpen, setDrawerOpen] = React.useState(false)\r\n  const [updatedProfile, setUpdatedProfile] = React.useState(false)\r\n\r\n  return (\r\n    <>\r\n      <div className='App'>\r\n\r\n        <LogoutTimer minutesOfInactivity={15} />\r\n\r\n        <Router>\r\n\r\n          {\r\n            user && <BurgerButton doAction={() => setDrawerOpen(true)} />\r\n          }\r\n\r\n          <Link to='/' style={{ textDecoration: 'none' }}>\r\n            <AppHeader />\r\n          </Link>\r\n\r\n          <DarkenDiv drawerOpen={drawerOpen} setDrawerOpen={setDrawerOpen} />\r\n          <DrawerLeftPanel updatedProfile={updatedProfile} drawerOpen={drawerOpen} setDrawerOpen={setDrawerOpen} />\r\n          \r\n          <ActionModal\r\n          queryTerm={'paymentMethodSetup'}\r\n          msg={'Payment method saved!'}\r\n          redirectPath={'/'}\r\n          timeout={3000}\r\n          delayBeforeLeave={2750}\r\n          doAction={() => {\r\n            setDrawerOpen(false)\r\n          }}\r\n          />\r\n\r\n          <ActionModal\r\n          queryTerm={'profileSetup'}\r\n          msg={'Thank you for completing your profile!'}\r\n          redirectPath={'/'}\r\n          timeout={3000}\r\n          delayBeforeLeave={2750}\r\n          doAction={() => {\r\n            setDrawerOpen(false)\r\n          }}\r\n          />\r\n          \r\n          <ActionModal\r\n          queryTerm={'updateInfo'}\r\n          msg={'You have successfully updated your profile info!'}\r\n          redirectPath={'/'}\r\n          timeout={3000}\r\n          delayBeforeLeave={2750}\r\n          doAction={() => {\r\n            setDrawerOpen(false)\r\n          }}\r\n          />\r\n          \r\n          <ActionModal\r\n          queryTerm={'paymentSucceeded'}\r\n          msg={'Your payment has been processed successfully!'}\r\n          redirectPath={'/'}\r\n          timeout={3000}\r\n          delayBeforeLeave={2750}\r\n          doAction={() => {\r\n            setDrawerOpen(false)\r\n          }}\r\n          />\r\n          \r\n          <ActionModal\r\n          queryTerm={'paymentFailed'}\r\n          msg={'There was an error, your payment method did not process'}\r\n          redirectPath={'/'}\r\n          timeout={3000}\r\n          delayBeforeLeave={2750}\r\n          doAction={() => {\r\n            setDrawerOpen(false)\r\n          }}\r\n          />\r\n          \r\n          <ActionModal\r\n          queryTerm={'updatedAddress'}\r\n          msg={'Successfully updated address info!'}\r\n          redirectPath={'/update-address'}\r\n          timeout={3000}\r\n          delayBeforeLeave={2750}\r\n          doAction={() => {\r\n            setDrawerOpen(false)\r\n          }}\r\n          />\r\n\r\n          <div>\r\n            <Switch>\r\n              \r\n              <Route exact path='/'>\r\n                <ProfileDataPage />\r\n              </Route>\r\n              \r\n              <Route path='/success'>\r\n                <SuccessPage />\r\n              </Route>\r\n              \r\n              <Route path='/checkout'>\r\n                <Elements stripe={stripePromise}>\r\n                  <Checkout />\r\n                </Elements>\r\n              </Route>\r\n\r\n              <Route path='/setup-payment-method'>\r\n                <Elements stripe={stripePromise}>\r\n                  <StripeCardEntryExample />\r\n                </Elements>\r\n              </Route>\r\n\r\n              <Route path='/update-address'>\r\n                <AddressInputBox />\r\n              </Route>\r\n\r\n              <Route path='/update-profile'>\r\n                <UpdateUserDataForm\r\n                user={user}\r\n                setUpdatedProfile={setUpdatedProfile}\r\n                extraActionFn={() => {\r\n                  setDrawerOpen(false)\r\n                }}\r\n                onCompleteParams={{\r\n                  queryKey: 'updateInfo',\r\n                  queryValue: 'complete'\r\n                }}\r\n                submitLabel={ 'Update info' }\r\n                />\r\n              </Route>\r\n\r\n            </Switch>\r\n          </div>\r\n\r\n        </Router>\r\n      </div>\r\n    </>\r\n  )\r\n\r\n}\r\n\r\nexport default App","C:\\Users\\EP\\Documents\\stripe-react\\src\\reportWebVitals.js",[],"C:\\Users\\EP\\Documents\\stripe-react\\src\\itemsList.js",["119"],"export default () => ([\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Gummy Bears'\r\n            },\r\n            unit_amount: 100\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Camisa'\r\n            },\r\n            unit_amount: 2500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Shirt'\r\n            },\r\n            unit_amount: 2000\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Pants'\r\n            },\r\n            unit_amount: 3500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Shoes'\r\n            },\r\n            unit_amount: 7500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Jacket'\r\n            },\r\n            unit_amount: 18500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Flops'\r\n            },\r\n            unit_amount: 1000\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Hat'\r\n            },\r\n            unit_amount: 1500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Suit'\r\n            },\r\n            unit_amount: 25500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Tie'\r\n            },\r\n            unit_amount: 4000\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Dress Shoes'\r\n            },\r\n            unit_amount: 12000\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Nikes'\r\n            },\r\n            unit_amount: 35500\r\n        },\r\n        quantity: 1\r\n    },\r\n])\r\n",["120","121"],"C:\\Users\\EP\\Documents\\stripe-react\\src\\productsList.js",["122"],"export default () => ([\r\n    'prod_IofQI7lk3rL1Qq',\r\n])\r\n","C:\\Users\\EP\\Documents\\stripe-react\\src\\Success.js",["123","124"],"import React from 'react'\r\nimport { useLocation, useHistory } from 'react-router-dom'\r\nimport { useAuth0 } from '@auth0/auth0-react'\r\nimport UpdateUserDataForm from './components/UpdateUserDataForm'\r\nimport useAuthToken from './hooks/useAuthToken'\r\nimport useFetchedUserData from './hooks/useFetchedUserData'\r\n\r\nfunction usePatchStripeSessionData (stripeSession) {\r\n\r\n    const [res, setRes] = React.useState(null)\r\n    const jwt = useAuthToken()\r\n    const user = useFetchedUserData()\r\n\r\n    React.useEffect(() => {\r\n\r\n        if (user && jwt && stripeSession) {\r\n            let status, statusCode\r\n            let subscriptions =\r\n                user.user_metadata?.subscriptions ? user.user_metadata.subscriptions.push(stripeSession.subscription)\r\n                : [ stripeSession.subscription ]\r\n            fetch(`https://gymwebapp.us.auth0.com/api/v2/users/${user.user_id}`, {\r\n                method: 'PATCH',\r\n                body: JSON.stringify({\r\n                    user_metadata: {\r\n                        stripe: {\r\n                            customer: user.user_metadata?.customer ? user.user_metadata.customer : stripeSession.customer,\r\n                            subscriptions: subscriptions !== user.user_metadata.subscriptions ? subscriptions : user.user_metadata.subscriptions\r\n                        }\r\n                    }\r\n                }),\r\n                headers: {\r\n                    'content-type': 'application/json',\r\n                    'authorization': `Bearer ${jwt.access_token}`\r\n                }\r\n            })\r\n            .then(response => {\r\n                status = response.status\r\n                return response.json()\r\n            })\r\n            .then(data => {\r\n                console.log(data)\r\n                setRes(data)\r\n                statusCode = data.statusCode ? data.statusCode : null\r\n                // setTimeout(() => {\r\n                //     history.push(`/?${queryKey}=${queryValue}`)\r\n                // }, 250)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                if (status === 401  || statusCode === 401) {\r\n                    if (localStorage.getItem('gym-app-jwt')) {\r\n                        localStorage.removeItem('gym-app-jwt')\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n    }, [user, jwt, stripeSession])\r\n\r\n    return res\r\n\r\n}\r\n\r\nexport default function SuccessPage () {\r\n\r\n    const location = useLocation()\r\n    const history = useHistory()\r\n    const { isLoading, isAuthenticated, user } = useAuth0()\r\n    const [stripeSession, setStripeSession] = React.useState(null)\r\n    usePatchStripeSessionData(stripeSession)\r\n\r\n    React.useEffect(() => {\r\n        console.log(\r\n            stripeSession\r\n        )\r\n    }, [stripeSession])\r\n\r\n    React.useEffect(() => {\r\n        // get session data to populate form fields\r\n        let session_id\r\n        if (location.search) {\r\n            session_id = location.search.split('=')[1]\r\n        }\r\n        if (session_id) {\r\n            if (isAuthenticated === true) {\r\n                // get stripe customer data \r\n                let data = fetch('/get-checkout-session', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ session_id }),\r\n                        headers: { 'Content-type': 'application/json' }\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    let { session } = data\r\n                    setStripeSession(session)\r\n                })\r\n                .catch(err => console.log(err))\r\n            }\r\n        } else {\r\n            // redirect to home\r\n            history.push('/')\r\n        }\r\n\r\n    }, [ isAuthenticated ])\r\n\r\n    const markup = () => (\r\n        <>\r\n            <br />\r\n            <div>\r\n                Payment was successful! Please finish setting up your profile\r\n            </div>\r\n            <br />\r\n            <UpdateUserDataForm\r\n            user={user}\r\n            onCompleteParams={{\r\n                queryKey: 'profileSetup',\r\n                queryValue: 'complete',\r\n            }}\r\n            submitLabel={ 'Complete Enrollment' }\r\n            />\r\n        </>\r\n    )\r\n\r\n    return (\r\n        <>\r\n        {\r\n            isLoading\r\n            ? <><br /><div>Loading...</div></>\r\n            :\r\n                isAuthenticated\r\n                ? markup()\r\n                : null\r\n        }\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\StyledButton.js",[],"C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\ProductBox.js",["125","126"],"import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledProductBoxDiv = styled.div`\r\nuser-select: none;\r\nalign-items: center;\r\nbox-shadow: 1px 1px 2px 2px rgba(0, 0, 0, 0.15);\r\nborder-radius: 3px;\r\npadding: 20px;\r\nwidth: 300px;\r\nposition: relative;\r\nmargin: auto;\r\nleft: 0;\r\nright: 0;\r\ntransform: scale(1.00);\r\ntransition: all .35s;\r\ncursor: pointer;\r\n&:hover {\r\n    transform: scale(1.025);\r\n    transition: all .35s;\r\n}\r\n`\r\n\r\nexport const convertToDollar = priceNum => {\r\n    let amt = priceNum.toString()\r\n    let dollarAmt = amt.split('')\r\n    dollarAmt.pop()\r\n    dollarAmt.pop()\r\n    dollarAmt.push('.00')\r\n    dollarAmt = dollarAmt.join('')\r\n    return dollarAmt\r\n}\r\n\r\nexport default ({ altTag, product, itemsChecked, updateCart }) => (\r\n    <>\r\n        <StyledProductBoxDiv\r\n        onClick={() => { updateCart(product) }}\r\n        >\r\n            <span>\r\n                <div key={product.id}>\r\n                { altTag ? altTag : product.name }\r\n                </div>\r\n                <div>\r\n                { product.statement_descriptor }\r\n                </div>\r\n                <br />\r\n                <div>\r\n                ${ convertToDollar( product.metadata.price ) }\r\n                </div>\r\n                <input\r\n                style={{ position: 'absolute', right: '10px', bottom: '10px' }}\r\n                type='checkbox'\r\n                checked={itemsChecked[product.id]}\r\n                onChange={() => { updateCart(product) }}\r\n                />\r\n            </span>\r\n            <img\r\n            style={{ 'width': '100px' }}\r\n            src={ product.images[0] }\r\n            />\r\n        </StyledProductBoxDiv>\r\n    </>\r\n)","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\Checkout.js",["127","128","129","130","131","132","133","134"],"import React from 'react'\r\nimport { includes, isEqual, reject } from 'lodash'\r\nimport { loadStripe } from '@stripe/stripe-js'\r\nimport StyledButton from './StyledButton'\r\nimport ProductBox, { convertToDollar } from './ProductBox'\r\nimport { useAuth0 } from '@auth0/auth0-react'\r\nimport useFetchedUserData from '../hooks/useFetchedUserData'\r\nimport { useHistory } from 'react-router-dom'\r\nimport ChoosePaymentMethod from './ChoosePaymentMethod'\r\nimport { useStripe } from '@stripe/react-stripe-js'\r\nimport { gymApiUrl } from '../utils/utils'\r\nimport useAuthToken from '../hooks/useAuthToken'\r\nimport { PacmanLoader, ClimbingBoxLoader, RingLoader } from 'react-spinners'\r\n\r\nconst stripePromise = loadStripe(process.env.REACT_APP_STRIPE_TEST_PUB_KEY)\r\n\r\nexport default function Checkout () {\r\n\r\n    const [products, setProducts] = React.useState(null)\r\n    const [itemsChecked, setItemsChecked] = React.useState({})\r\n    const [shoppingCart, setShoppingCart] = React.useState([])\r\n    const { isAuthenticated, isLoading } = useAuth0()\r\n    const fetchedUser = useFetchedUserData()\r\n    const history = useHistory()\r\n    const stripe = useStripe()\r\n    const jwt = useAuthToken()\r\n\r\n    React.useEffect(() => {\r\n  \r\n      fetch('/get-list-of-products', {\r\n        method: 'GET'\r\n      })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setProducts(data.products)\r\n      })\r\n      .catch(err => console.log(err))\r\n      \r\n    }, [])\r\n    \r\n    const handleClick = async event => {\r\n      if (!fetchedUser) {\r\n        console.log(\r\n          'could not get auth0 fetched user object'\r\n        )\r\n        return\r\n      }\r\n      if (fetchedUser && shoppingCart.length > 0) {\r\n        // next step, choose existing customer payment method\r\n        // history.push('/checkout-confirm')\r\n        fetch('/process-payment-for-classes', {\r\n          method: 'POST',\r\n          body: JSON.stringify({\r\n            shoppingCart,\r\n            paymentMethodChosen,\r\n            stripe: fetchedUser?.user_metadata?.stripe ? fetchedUser.user_metadata.stripe : null\r\n          }),\r\n          headers: {\r\n            'Content-type': 'application/json'\r\n          }\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          console.log(data)\r\n          setPaymentIntentCreated( data )\r\n          // history.push('/checkout-confirm')\r\n        })\r\n        .catch(err => console.log(err))\r\n\r\n      } else {\r\n        console.log(\r\n          'there is nothing in your shopping cart'\r\n        )\r\n      }\r\n  \r\n    }\r\n  \r\n    const updateCart = product => {\r\n      setItemsChecked({\r\n        ...itemsChecked,\r\n        [product.id]: !itemsChecked[product.id]\r\n      })\r\n  \r\n      let inCart = false\r\n      let itemToAdd = { price: product.metadata.price_id, quantity: 1 }\r\n      shoppingCart.forEach(item => {\r\n        if (isEqual(item, itemToAdd)) {\r\n          inCart = true\r\n        }\r\n      })\r\n  \r\n      if (!inCart) {\r\n        setShoppingCart(() => ([\r\n          ...shoppingCart,\r\n          itemToAdd\r\n        ]))\r\n      } else {\r\n        setShoppingCart(() => (\r\n          shoppingCart.filter(item => {\r\n            if (!isEqual(item, itemToAdd)) {\r\n              return item\r\n            }\r\n          })\r\n        ))\r\n      }\r\n  \r\n    }\r\n\r\n    const [paymentMethodChosen, setPaymentMethodChosen] = React.useState(null)\r\n    const [paymentIntentCreated, setPaymentIntentCreated] = React.useState(null)\r\n    const [errorMsg, setErrorMsg] = React.useState(null)\r\n    const [successMsg, setSuccessMsg] = React.useState(null)\r\n    const [processingPayment, setProcessingPayment] = React.useState(null)\r\n    \r\n    const shoppingCartMappedToProducts = () => {\r\n      let matches = []\r\n      shoppingCart.forEach(item => {\r\n        products.forEach(product => {\r\n          if (product?.metadata?.price_id === item.price) {\r\n            matches.push(product)\r\n          }\r\n        })\r\n      })\r\n      return matches\r\n    }\r\n\r\n    const cartItemsDescriptions = () => (\r\n      shoppingCartMappedToProducts().map(item => {\r\n        if (item.name && item?.metadata?.price) {\r\n          return `${item.name}:  $${convertToDollar(item.metadata.price)}`\r\n        }\r\n      })\r\n      .join(', ')\r\n    )\r\n\r\n    const cartItemsCost = () => (\r\n      '$'\r\n      .concat(\r\n        convertToDollar(\r\n          shoppingCartMappedToProducts()\r\n          .map(item => item?.metadata?.price.slice(0, -2))\r\n          .map(amt => parseInt(amt))\r\n          .reduce((a, b) => a + b)      \r\n          .toString()\r\n          .concat('00')\r\n        )\r\n      )\r\n    )\r\n\r\n    const processPayment = () => {\r\n      return new Promise((resolve, reject) => {\r\n        stripe.confirmCardPayment(paymentIntentCreated.client_secret)\r\n        .then(response => {\r\n          resolve( response )\r\n        })\r\n        .catch(err => {\r\n          reject( err )\r\n        })\r\n      })\r\n    }\r\n\r\n    const getPTSessions = () => {\r\n      let ptCount = shoppingCartMappedToProducts()\r\n      .map(product => {\r\n        let matches = product.name.match(/personal training/gi)\r\n        if (matches) {\r\n          console.log(\r\n            product.metadata.count\r\n          )\r\n          return parseInt(product?.metadata?.count)\r\n        } else {\r\n          return 0\r\n        }\r\n      })\r\n      console.log(\r\n        ptCount\r\n      )\r\n      if (ptCount.length > 0) {\r\n        let addedUp = ptCount.reduce((a, b) => a + b)\r\n        return addedUp\r\n      } else {\r\n        return ptCount[0]\r\n      }\r\n    }\r\n\r\n    const getClassList = () => {\r\n      let classes = shoppingCartMappedToProducts()\r\n      .map(_class => {\r\n        let matches = _class.name.match(/subscription/gi)\r\n        if (matches) {\r\n          return _class.name\r\n        }\r\n      })\r\n      \r\n      if (classes.length > 0) {\r\n        return classes\r\n      } else {\r\n        return []\r\n      }\r\n    }\r\n    \r\n    const postToAuth0User = () => {\r\n      let { user_metadata } = fetchedUser\r\n      let gym_purchases = user_metadata?.gym_purchases ? user_metadata.gym_purchases : []\r\n      let pt_sessions = user_metadata?.pt_sessions ? user_metadata.pt_sessions : 0\r\n      let classes = user_metadata?.classes ? user_metadata.classes : []\r\n      console.log(\r\n        pt_sessions,\r\n        getPTSessions()\r\n      )\r\n      return new Promise((resolve, reject) => {\r\n        fetch(`${gymApiUrl}${fetchedUser.user_id}`, {\r\n          method: 'PATCH',\r\n          body: JSON.stringify({\r\n            user_metadata: {\r\n              ...user_metadata,\r\n              gym_purchases: [\r\n                ...gym_purchases,\r\n                ...shoppingCartMappedToProducts()\r\n              ],\r\n              pt_sessions: (\r\n                getPTSessions() > 0 ? getPTSessions() + pt_sessions : pt_sessions\r\n              ),\r\n              classes: [ ...classes, ...getClassList() ]\r\n            }\r\n          }),\r\n          headers: {\r\n            'Content-type': 'application/json',\r\n            'Authorization': `Bearer ${jwt.access_token}`\r\n          }\r\n        })\r\n        .then(response => response.json())\r\n        .then(res => { resolve( res ) })\r\n        .catch(err => { reject( err ) })\r\n      })\r\n    }\r\n    \r\n    return (\r\n        <>\r\n        {\r\n          fetchedUser ? null\r\n          :\r\n            <>\r\n              <br />\r\n              <RingLoader\r\n              css={{\r\n                position: 'absolute',\r\n                left: 0, right: 0,\r\n                margin: 'auto',\r\n              }}\r\n              size={ 50 }\r\n              color={ 'slateblue' }\r\n              loading={ true }\r\n              />\r\n            </>\r\n        }\r\n        {\r\n          isLoading ? <></>\r\n          :\r\n              fetchedUser && jwt && isAuthenticated && !paymentIntentCreated ?\r\n              <>\r\n                <h2>\r\n                  Enroll in Classes\r\n                </h2>\r\n                <br />\r\n                <div>\r\n                  {\r\n                    products ?\r\n                    products\r\n                    .map(product => {\r\n                      if (fetchedUser?.user_metadata?.classes) {\r\n                        let { user_metadata: { classes } } = fetchedUser\r\n                        if (includes(classes, product.name)) {\r\n                          return <></>\r\n                        }\r\n                      }\r\n                      const getAltPTTag = () => {\r\n                        if (fetchedUser?.user_metadata?.pt_sessions &&\r\n                          product.name.match(/personal training/gi)) {\r\n                          let { user_metadata: { pt_sessions } } = fetchedUser\r\n                          return 'Add More Personal Training Sessions'\r\n                        } else {\r\n                          return null\r\n                        }\r\n                      }\r\n                      return (\r\n                        <>\r\n                          <ProductBox\r\n                          itemsChecked={itemsChecked}\r\n                          updateCart={updateCart}\r\n                          product={product}\r\n                          altTag={ getAltPTTag()}\r\n                          />\r\n                          <br />\r\n                        </>\r\n                      )\r\n                    })\r\n                    : null\r\n                  }\r\n                </div>\r\n                <br />\r\n                {\r\n                  shoppingCart.length > 0 ?\r\n                  <ChoosePaymentMethod\r\n                    onPaymentMethodChosen={(pmt) => { setPaymentMethodChosen(pmt) }}\r\n                  /> : null\r\n                }\r\n                <br />\r\n                <div style={{ marginTop: '50px' }}></div>\r\n                {\r\n                  shoppingCart.length > 0 && paymentMethodChosen ?\r\n                  <StyledButton\r\n                    style={{\r\n                      left: 0,\r\n                      right: 0,\r\n                      position: 'relative',\r\n                      margin: 'auto'\r\n                    }}\r\n                    type='button' role='link'\r\n                    onClick={handleClick}\r\n                  >\r\n                    Next\r\n                  </StyledButton>\r\n                  : null\r\n                }\r\n              </>\r\n              :\r\n              // if payment intent created, confirm the payment details\r\n              <>\r\n                {\r\n                  shoppingCart.length > 0 ?\r\n                  <>\r\n                    <h2 style={{ color: processingPayment ? '#ccc' : '#000' }}>Confirm Payment Details</h2>\r\n                    <h4 style={{ color: processingPayment ? '#ccc' : '#000' }}>Please confirm your details below and click \"Confirm Payment\" to complete your order</h4>\r\n                    <br />\r\n                    <div>\r\n                      <div style={{ color: processingPayment ? '#ccc' : '#000' }}>\r\n                        Products: { cartItemsDescriptions() }\r\n                      </div>\r\n                      <br />\r\n                      <div style={{ color: processingPayment ? '#ccc' : '#000' }}>\r\n                        Total: { cartItemsCost() }\r\n                      </div>\r\n                      <br />\r\n                      {\r\n                        successMsg ?\r\n                        <div>{ successMsg }</div>\r\n                        : null\r\n                      }\r\n                      {\r\n                        processingPayment ?\r\n                        <>\r\n                          <br />\r\n                          <RingLoader\r\n                          css={{\r\n                            position: 'absolute',\r\n                            left: 0, right: 0,\r\n                            margin: 'auto',\r\n                          }}\r\n                          size={ 50 }\r\n                          color={ 'slateblue' }\r\n                          loading={ true }\r\n                          />\r\n                          <br />\r\n                          <br />\r\n                          <br />\r\n                          <br />\r\n                          <div style={{ fontSize: '13px' }}>Processing your payment, please do not close your browser until it completes!</div>\r\n                        </>\r\n                        :\r\n                        <StyledButton\r\n                        onClick={async () => {\r\n                          setProcessingPayment( true )\r\n                          try {\r\n                            let result = await processPayment()\r\n                            console.log(\r\n                              result\r\n                            )\r\n                            if (result.paymentIntent.status === 'succeeded') {\r\n                              let postResult = await postToAuth0User()\r\n                              if (postResult) {\r\n                                setSuccessMsg( 'Payment Succeeded!' )\r\n                                history.push('/checkout/?paymentSucceeded=complete')\r\n                              }\r\n                            }\r\n                          } catch (err) {\r\n                            console.log(err)\r\n                            setErrorMsg( err.message ? err.message : 'an error occurred processing your card' )\r\n                            history.push('/checkout/?paymentFailed=error')\r\n                          }\r\n                        }}\r\n                        >\r\n                          Confirm Payment\r\n                        </StyledButton>\r\n                      }\r\n                      {\r\n                        errorMsg ?\r\n                        <div>{ errorMsg }</div>\r\n                        : null\r\n                      }\r\n                    </div>\r\n                  </>\r\n                  : null\r\n                }\r\n              </>\r\n      }\r\n      </>\r\n    )\r\n}\r\n","C:\\Users\\EP\\Documents\\stripe-react\\src\\hooks\\useFetchedUserData.js",[],"C:\\Users\\EP\\Documents\\stripe-react\\src\\utils\\utils.js",[],["135","136"],"C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\UpdateUserDataForm.js",[],"C:\\Users\\EP\\Documents\\stripe-react\\src\\hooks\\useAuthToken.js",["137"],"import React from 'react'\r\nimport { useAuth0 } from '@auth0/auth0-react'\r\n\r\nexport default function useAuthToken () {\r\n\r\n    const [jwt, setJwt] = React.useState(null)\r\n    const { isAuthenticated } = useAuth0()\r\n\r\n    React.useEffect(() => {\r\n        console.log(\r\n        'user auth: ', isAuthenticated\r\n        )\r\n        if (isAuthenticated === true) {\r\n            if (window.localStorage && !localStorage.getItem('gym-app-jwt')) {\r\n                fetch('/retrieve-api-token', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-type': 'application/json' }\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    console.log(data)\r\n                    setJwt(data)\r\n                    localStorage.setItem('gym-app-jwt', JSON.stringify(data))\r\n                    // we will update this to send the jwt to our mongo db for better security...\r\n                    // we will then need to blacklist or invalidate old jwt tokens as well\r\n                    // but for now, let's make a request using the jwt! (at Success component)\r\n                    // request will be PATCH to update user \r\n                })\r\n                .catch(err => console.log(err))\r\n            } else {\r\n                console.log(jwt)\r\n                setJwt(JSON.parse(localStorage.getItem('gym-app-jwt')))\r\n            }\r\n        }\r\n\r\n    }, [isAuthenticated])\r\n\r\n    return jwt\r\n\r\n}","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\DrawerComponent.js",["138","139"],"C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\ActionModal.js",["140","141"],"import React from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { useLocation, useHistory } from 'react-router-dom'\r\n\r\nconst ModalDiv_SlideIn = styled.div`\r\ncolor: white;\r\npositon: absolute;\r\npadding: 10px 25px;\r\nborder-radius: 3px;\r\nbackground-color: ${props => props.error ? 'red' : 'mediumseagreen' };\r\nbox-shadow: 1px 1px 2px 2px rgba(0, 0, 0, 0.2);\r\ntransform: translateX(-100vw);\r\ntransition: transform .5s ease-out;\r\n${props => props.slide === 'in' && css`\r\n  transform: translateX(0px);\r\n`}\r\n${props => props.slide === 'out' && css`\r\n  transform: translateX(200vw);\r\n`}\r\n`\r\n\r\nfunction ActionModal ({ doAction, msg, redirectPath, queryTerm, timeout, delayBeforeLeave }) {\r\n\r\n  const location = useLocation()\r\n  const history = useHistory()\r\n  const [modal, setModal] = React.useState(false)\r\n  const [slide, setSlide] = React.useState(null)\r\n  const [error, setError] = React.useState(false)\r\n\r\n  React.useEffect(() => {\r\n    if (location) {\r\n      let search = location.search.substr(1, location.search.length)\r\n      let params = search.split('=')\r\n      if (params) {\r\n        let key = params[0]\r\n        let value = params[1]\r\n        if (key && value) {\r\n          console.log(key, value)\r\n          if (key === queryTerm) {\r\n            if (value === 'complete' || value === 'error') {\r\n              if (value === 'error') {\r\n                setError(true)\r\n              }\r\n              setModal(true) // maybe replace this with react toast lib\r\n              setTimeout(() => setSlide('in'), 50)\r\n              setTimeout(() => {\r\n                setSlide('out')\r\n              }, delayBeforeLeave)\r\n              setTimeout(() => {\r\n                if (redirectPath) {\r\n                  history.push(redirectPath)\r\n                }\r\n                doAction()\r\n                setModal(false)\r\n              }, timeout)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [location])\r\n  \r\n  return (\r\n    <>\r\n    {\r\n      modal ?\r\n        <>\r\n            <ModalDiv_SlideIn slide={ slide } error={ error }>\r\n              {msg}\r\n            </ModalDiv_SlideIn>\r\n        </>\r\n      :\r\n        <></>\r\n    }\r\n    </>\r\n  )\r\n}\r\n\r\nexport { ActionModal }","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\AppHeader.js",[],"C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\ProfileDataPage.js",[],"C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\BugerButton.js",["142"],"import React from 'react'\r\nimport StyledButton from './StyledButton'\r\n\r\nexport default ({ doAction }) => (\r\n    <StyledButton\r\n    onClick={doAction}\r\n    style={{ position: 'absolute', left: '14px', top: '7px', width: '50px', fontSize: '24px' }}\r\n    >\r\n      &equiv;\r\n    </StyledButton>\r\n)\r\n","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\LogoutTimer.js",["143","144"],"import React from 'react'\r\nimport { useAuth0 } from '@auth0/auth0-react'\r\n\r\nexport default function LogoutTimer ({ minutesOfInactivity }) {\r\n\r\n    const { isAuthenticated, logout } = useAuth0()\r\n    const minutes = React.useRef(minutesOfInactivity)\r\n    const seconds = React.useRef(0)\r\n    const timeout = React.useRef(() => setTOut(minutes.current))\r\n    const interval = React.useRef(() => setCountdown(minutes.current))\r\n\r\n    const setTOut = () => {\r\n        // console.log(`logout timeout refreshed, set at ${minutes.current} minute${minutes.current > 1 ? 's' : ''}`)\r\n        return setTimeout(() => {\r\n            console.log(`logging out due to ${minutes.current} of inactivity`)\r\n            // also remove the jwt token from localStorage\r\n            if (localStorage.getItem('gym-app-jwt')) {\r\n                localStorage.removeItem('gym-app-jwt')\r\n            }\r\n            logout({ redirectTo: window.location.origin })\r\n        }, ((1000 * 60) * minutes.current))\r\n    }\r\n\r\n    const setCountdown = () => {\r\n        seconds.current = minutes.current * 60\r\n        return setInterval(() => {\r\n            seconds.current = seconds.current - 1\r\n            let sec = seconds.current % 60\r\n            // console.log(`timer: ${((seconds.current - (seconds.current % 60)) / 60)}:${sec < 10 ? `0${sec}` : sec}`)\r\n        }, 1000)\r\n    }\r\n\r\n    React.useEffect(() => {\r\n\r\n        const mouseMoveHandler = () => {\r\n            if (timeout?.current && interval?.current) {\r\n                clearTimeout(timeout.current)\r\n                clearInterval(interval.current)\r\n            }\r\n            timeout.current = setTOut()\r\n            interval.current = setCountdown()   \r\n        }\r\n\r\n        if (isAuthenticated === true) {\r\n            console.log('authenticated, set a timer to logout automagically, but refresh upon mouse movement')\r\n            window.addEventListener('mousemove', mouseMoveHandler)\r\n            mouseMoveHandler() // fire once to init logout timer\r\n        }\r\n\r\n        return () => {\r\n            window.removeEventListener('mousemove', mouseMoveHandler)\r\n        }\r\n\r\n    }, [isAuthenticated])\r\n\r\n    return <></>\r\n\r\n}","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\CreditCardEntry.js",[],["145","146"],"C:\\Users\\EP\\Documents\\stripe-react\\src\\hooks\\useCreateStripeCustomer.js",["147"],"import React from 'react'\r\nimport { useAuth0 } from '@auth0/auth0-react'\r\nimport useAuthToken from './useAuthToken'\r\n\r\nexport default function useCreateStripeCustomer () {\r\n  \r\n  const { user, logout } = useAuth0()\r\n  const [stripeCustomer, setStripeCustomer] = React.useState(null)\r\n  const jwt = useAuthToken()\r\n  \r\n  React.useEffect(() => {\r\n\r\n    if (stripeCustomer) { // once we have both the stripeCustomer and jwt deps.. do..\r\n      // patch stripe customer through to auth0 user \r\n      \r\n      console.log('stripe customer created')\r\n\r\n      if (jwt) {\r\n        \r\n        let status, statusCode\r\n        fetch(`https://gymwebapp.us.auth0.com/api/v2/users/${user.user_id ? user.user_id : user.sub}`, {\r\n            method: 'PATCH',\r\n            body: JSON.stringify({\r\n              user_metadata: {\r\n                stripe: {\r\n                  customer: stripeCustomer\r\n                }\r\n              }\r\n            }),\r\n            headers: {\r\n              'content-type': 'application/json',\r\n              'authorization': `Bearer ${jwt.access_token}`\r\n            }\r\n        })\r\n        .then(response => {\r\n          status = response.status\r\n          return response.json()\r\n        })\r\n        .then(data => {\r\n          console.log(data)\r\n          statusCode = data.statusCode ? data.statusCode : null\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n            if (status === 401 || statusCode === 401) {\r\n              if (localStorage.getItem('gym-app-jwt')) {\r\n                localStorage.removeItem('gym-app-jwt')\r\n                logout({ redirectTo: window.location.origin })\r\n              }\r\n            }\r\n        })\r\n      }\r\n\r\n    }\r\n\r\n  }, [stripeCustomer, jwt]) // on stripeCustomer or jwt state change.. do..\r\n\r\n  React.useEffect(() => {\r\n\r\n    if (user) {\r\n      console.log(user)\r\n      console.log(\r\n        user.email\r\n      )\r\n\r\n      console.log('hook should create stripe customer')\r\n\r\n      let bodyData = {\r\n        email: user.email\r\n      }\r\n      if (user.given_name && user.family_name) {\r\n        bodyData.name = `${user.given_name} ${user.family_name}`\r\n      }\r\n\r\n      fetch('/create-stripe-customer', {\r\n        method: 'POST',\r\n        body: JSON.stringify(bodyData),\r\n        headers: {\r\n          'Content-type': 'application/json'\r\n        }\r\n      })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        if (data.value === true) { // if we created a new Stripe customer\r\n          console.log(data)\r\n          let { customer } = data\r\n          setStripeCustomer(customer) // save the stripe api data to auth0 user\r\n        }\r\n      })\r\n      .catch(err => console.log(err))\r\n    }\r\n\r\n  }, [user])\r\n\r\n}","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\StripeCardEntryExample.js",["148","149"],"import React, {useState} from 'react'\r\nimport { CardElement, useElements, useStripe } from '@stripe/react-stripe-js'\r\nimport './2-Card-Detailed.css'\r\nimport useFetchedUserData from '../hooks/useFetchedUserData'\r\nimport { useAuth0 } from '@auth0/auth0-react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { gymApiUrl } from '../utils/utils'\r\nimport useAuthToken from '../hooks/useAuthToken'\r\nimport { RingLoader } from 'react-spinners'\r\n\r\nconst CARD_OPTIONS = {\r\n  iconStyle: 'solid',\r\n  style: {\r\n    base: {\r\n      iconColor: '#c4f0ff',\r\n      color: '#000',\r\n      fontWeight: 500,\r\n      fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',\r\n      fontSize: '16px',\r\n      fontSmoothing: 'antialiased',\r\n      ':-webkit-autofill': {\r\n        color: '#fce883',\r\n      },\r\n      '::placeholder': {\r\n        color: 'rgba(0, 0, 0, 0.25)',\r\n      },\r\n    },\r\n    invalid: {\r\n      iconColor: '#666',\r\n      color: '#666',\r\n    },\r\n  },\r\n}\r\n\r\nconst CardField = ({onChange}) => (\r\n  <div className=\"FormRow\">\r\n    <CardElement options={CARD_OPTIONS} onChange={onChange} />\r\n  </div>\r\n);\r\n\r\nconst Field = ({\r\n  label,\r\n  id,\r\n  type,\r\n  placeholder,\r\n  required,\r\n  autoComplete,\r\n  value,\r\n  onChange,\r\n}) => (\r\n  <div className=\"FormRow\">\r\n    <label htmlFor={id} className=\"FormRowLabel\">\r\n      {label}\r\n    </label>\r\n    <input\r\n      className=\"FormRowInput\"\r\n      id={id}\r\n      type={type}\r\n      placeholder={placeholder}\r\n      required={required}\r\n      autoComplete={autoComplete}\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n  </div>\r\n)\r\n\r\nconst SubmitButton = ({processing, error, children, disabled}) => (\r\n  <button\r\n    className={`SubmitButton ${error ? 'SubmitButton--error' : ''}`}\r\n    type=\"submit\"\r\n    disabled={processing || disabled}\r\n  >\r\n    {processing ? 'Processing...' : children}\r\n  </button>\r\n)\r\n\r\nconst ErrorMessage = ({children}) => (\r\n  <div className=\"ErrorMessage\" role=\"alert\">\r\n    <svg width=\"16\" height=\"16\" viewBox=\"0 0 17 17\">\r\n      <path\r\n        fill=\"#FFF\"\r\n        d=\"M8.5,17 C3.80557963,17 0,13.1944204 0,8.5 C0,3.80557963 3.80557963,0 8.5,0 C13.1944204,0 17,3.80557963 17,8.5 C17,13.1944204 13.1944204,17 8.5,17 Z\"\r\n      />\r\n      <path\r\n        fill=\"#6772e5\"\r\n        d=\"M8.5,7.29791847 L6.12604076,4.92395924 C5.79409512,4.59201359 5.25590488,4.59201359 4.92395924,4.92395924 C4.59201359,5.25590488 4.59201359,5.79409512 4.92395924,6.12604076 L7.29791847,8.5 L4.92395924,10.8739592 C4.59201359,11.2059049 4.59201359,11.7440951 4.92395924,12.0760408 C5.25590488,12.4079864 5.79409512,12.4079864 6.12604076,12.0760408 L8.5,9.70208153 L10.8739592,12.0760408 C11.2059049,12.4079864 11.7440951,12.4079864 12.0760408,12.0760408 C12.4079864,11.7440951 12.4079864,11.2059049 12.0760408,10.8739592 L9.70208153,8.5 L12.0760408,6.12604076 C12.4079864,5.79409512 12.4079864,5.25590488 12.0760408,4.92395924 C11.7440951,4.59201359 11.2059049,4.59201359 10.8739592,4.92395924 L8.5,7.29791847 L8.5,7.29791847 Z\"\r\n      />\r\n    </svg>\r\n    {children}\r\n  </div>\r\n)\r\n\r\nexport default function StripeCardEntryExample () {\r\n\r\n  const stripe = useStripe()\r\n  const elements = useElements()\r\n  const fetchedUser = useFetchedUserData() // my hook \r\n  const { isLoading, isAuthenticated } = useAuth0()\r\n  const [error, setError] = useState(null)\r\n  const [cardComplete, setCardComplete] = useState(false)\r\n  const [processing, setProcessing] = useState(false)\r\n  const [paymentMethod, setPaymentMethod] = useState(null)\r\n  const [billingDetails, setBillingDetails] = useState({\r\n    email: '',\r\n    phone: '',\r\n    name: '',\r\n  })\r\n  const [keepBillingDetails, setKeepBillingDetails] = useState(true)\r\n  const history = useHistory()\r\n  const jwt = useAuthToken()\r\n\r\n  const patchPaymentMethodData = (data) => {\r\n    let { user_metadata: { stripe } } = fetchedUser\r\n    let paymentMethods\r\n    if (stripe.paymentMethods) {\r\n      paymentMethods = stripe.paymentMethods\r\n    } else {\r\n      paymentMethods = {}\r\n    }\r\n    let new_metadata = {\r\n      stripe: {\r\n        ...stripe,\r\n        paymentMethods: {\r\n          ...paymentMethods,\r\n          [data.id]: data\r\n        }\r\n      }\r\n    }\r\n    fetch(`${gymApiUrl}${fetchedUser.user_id}`, {\r\n      method: 'PATCH',\r\n      body: JSON.stringify({\r\n        user_metadata: new_metadata\r\n      }),\r\n      headers: {\r\n          'content-type': 'application/json',\r\n          'authorization': `Bearer ${jwt.access_token}`\r\n      }\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      console.log('saved payment data to auth0 user', data)\r\n    })\r\n    .catch(err => console.log(err))\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (paymentMethod) {\r\n      history.push('/?paymentMethodSetup=complete')\r\n    }\r\n  }, [paymentMethod])\r\n\r\n  React.useEffect(() => {\r\n    if (fetchedUser) {\r\n        setBillingDetails({\r\n            email: fetchedUser.email,\r\n            phone: fetchedUser.user_metadata?.mobile ? fetchedUser.user_metadata.mobile : '',\r\n            name: fetchedUser?.given_name && fetchedUser?.family_name ? fetchedUser.given_name + ' ' + fetchedUser.family_name : 'user'\r\n        })\r\n    }\r\n  }, [fetchedUser])\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault()\r\n    if (fetchedUser?.user_metadata?.stripe?.customer) {\r\n        // console.log( fetchedUser.user_metadata.stripe.customer.id )\r\n        \r\n        if (!stripe || !elements) {\r\n            // Stripe.js has not loaded yet. Make sure to disable\r\n            // form submission until Stripe.js has loaded.\r\n            return\r\n        }\r\n    \r\n        if (error) {\r\n            elements.getElement('card').focus()\r\n            return\r\n        }\r\n    \r\n        if (cardComplete) {\r\n            setProcessing(true)\r\n        }\r\n    \r\n        const payload = await stripe.createPaymentMethod({\r\n            type: 'card',\r\n            card: elements.getElement(CardElement),\r\n            billing_details: billingDetails,\r\n        })\r\n    \r\n        setProcessing(false)\r\n    \r\n        if (payload.error) {\r\n            setError(payload.error)\r\n        } else {\r\n            setPaymentMethod(payload.paymentMethod)\r\n        }\r\n\r\n        // my backend route \r\n        if (!error) {\r\n            console.log(payload.paymentMethod)\r\n            fetch('/attach-payment-method', {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    paymentMethod: payload.paymentMethod,\r\n                    customer: fetchedUser.user_metadata.stripe.customer\r\n                }),\r\n                headers: { 'Content-type': 'application/json' }\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data)\r\n                let { paymentMethodAttachResult } = data\r\n                // setPmtMethodResult(\r\n                //   paymentMethodAttachResult\r\n                // )\r\n                patchPaymentMethodData( paymentMethodAttachResult )\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n\r\n        } else {\r\n            console.log(error)\r\n        }\r\n\r\n    } else {\r\n        console.log('stripe customer id data not found in auth0 user object')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h2>Enter a Payment Method</h2>\r\n        <>\r\n            {\r\n                fetchedUser && fetchedUser.family_name && fetchedUser.given_name && fetchedUser?.user_metadata?.mobile ?\r\n                <>\r\n                    <>\r\n                        <br />\r\n                        {\r\n                            keepBillingDetails === true ?\r\n                            <>\r\n                                <div style={{ display: 'inline-block' }}>Keeping current user billing info:</div>\r\n                                <button\r\n                                style={{ display: 'inline-block', marginLeft: '10px' }}\r\n                                onClick={() => setKeepBillingDetails(false)}\r\n                                >\r\n                                    Change Billing Info\r\n                                </button>\r\n                                <br />\r\n                                <br />\r\n                                {\r\n                                    fetchedUser ?\r\n                                    <>\r\n                                        <div>{fetchedUser?.given_name && fetchedUser?.family_name ? fetchedUser.given_name + ' ' + fetchedUser.family_name : 'no name set in profile'}</div>\r\n                                        <div>{fetchedUser?.email ? fetchedUser.email : ''}</div>\r\n                                        <div>{fetchedUser?.user_metadata?.mobile ? fetchedUser.user_metadata.mobile : 'no mobile number set in profile'}</div>\r\n                                    </>\r\n                                    : <></>\r\n                                }\r\n                            </>\r\n                            :\r\n                            <>\r\n                                <div></div>\r\n                                <button\r\n                                onClick={() => {\r\n                                    if (fetchedUser) {\r\n                                        setBillingDetails({\r\n                                            email: fetchedUser.email,\r\n                                            phone: fetchedUser.user_metadata?.mobile ? fetchedUser.user_metadata.mobile : '',\r\n                                            name: fetchedUser?.given_name && fetchedUser?.family_name ? fetchedUser.given_name + ' ' + fetchedUser.family_name : 'user'\r\n                                        })\r\n                                        setKeepBillingDetails(true)\r\n                                    }\r\n                                }}\r\n                                >\r\n                                    Cancel\r\n                                </button>\r\n                            </>\r\n                        }\r\n                    </>\r\n                    <div id='form-container'>\r\n                        <form className=\"Form\" onSubmit={handleSubmit}>\r\n                            {\r\n                                keepBillingDetails === false ?\r\n                                <fieldset className=\"FormGroup\">\r\n                                    <Field\r\n                                    label=\"Name\"\r\n                                    id=\"name\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"Jane Doe\"\r\n                                    required\r\n                                    autoComplete=\"name\"\r\n                                    value={billingDetails.name}\r\n                                    onChange={(e) => {\r\n                                        setBillingDetails({...billingDetails, name: e.target.value});\r\n                                    }}\r\n                                    />\r\n                                    <Field\r\n                                    label=\"Email\"\r\n                                    id=\"email\"\r\n                                    type=\"email\"\r\n                                    placeholder=\"janedoe@gmail.com\"\r\n                                    required\r\n                                    autoComplete=\"email\"\r\n                                    value={billingDetails.email}\r\n                                    onChange={(e) => {\r\n                                        setBillingDetails({...billingDetails, email: e.target.value});\r\n                                    }}\r\n                                    />\r\n                                    <Field\r\n                                    label=\"Phone\"\r\n                                    id=\"phone\"\r\n                                    type=\"tel\"\r\n                                    placeholder=\"(941) 555-0123\"\r\n                                    required\r\n                                    autoComplete=\"tel\"\r\n                                    value={billingDetails.phone}\r\n                                    onChange={(e) => {\r\n                                        setBillingDetails({...billingDetails, phone: e.target.value});\r\n                                    }}\r\n                                    />\r\n                                </fieldset>\r\n                                : <></>\r\n                            }\r\n                        <fieldset className=\"FormGroup\">\r\n                            <CardField\r\n                            onChange={(e) => {\r\n                                setError(e.error);\r\n                                setCardComplete(e.complete);\r\n                            }}\r\n                            />\r\n                        </fieldset>\r\n                        {error && <ErrorMessage>{error.message}</ErrorMessage>}\r\n                        <div\r\n                        style={{\r\n                          width: '300px',\r\n                          position: 'absolute',\r\n                          left: 0, right: 0,\r\n                          margin: 'auto'\r\n                        }}\r\n                        >\r\n                          <SubmitButton processing={processing} error={error} disabled={!stripe}>\r\n                              Create Payment Method\r\n                          </SubmitButton>\r\n                        </div>\r\n                        </form>\r\n                    </div>\r\n                </>\r\n                :\r\n                <>\r\n                  <br />\r\n                  <RingLoader\r\n                  css={{\r\n                    position: 'absolute',\r\n                    left: 0, right: 0,\r\n                    margin: 'auto',\r\n                  }}\r\n                  size={ 50 }\r\n                  color={ 'slateblue' }\r\n                  loading={ fetchedUser ? false : true }\r\n                  />\r\n                  {\r\n                      fetchedUser && isAuthenticated === true ?\r\n                          isLoading ?\r\n                          null\r\n                          :\r\n                          <>\r\n                              <br />\r\n                              <div>Please update your profile info with your full name and mobile phone before adding a payment method</div>\r\n                          </>\r\n                      : null\r\n                  }\r\n              </>\r\n            }\r\n        </>\r\n    </>\r\n  )\r\n}\r\n\r\nconst ELEMENTS_OPTIONS = {\r\n  fonts: [\r\n    {\r\n      cssSrc: 'https://fonts.googleapis.com/css?family=Roboto',\r\n    },\r\n  ],\r\n};\r\n\r\n// export default StripeCardEntryExample\r\n\r\n// Make sure to call `loadStripe` outside of a component’s render to avoid\r\n// recreating the `Stripe` object on every render.\r\n// const stripePromise = loadStripe('pk_test_6pRNASCoBOKtIshFeQd4XMUh');\r\n\r\n// const App = () => {\r\n//   return (\r\n//     <div className=\"AppWrapper\">\r\n//       <Elements stripe={stripePromise} options={ELEMENTS_OPTIONS}>\r\n//         <CheckoutForm />\r\n//       </Elements>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\ChoosePaymentMethod.js",["150","151"],"import React from 'react'\r\nimport useFetchedUserData from '../hooks/useFetchedUserData'\r\nimport visaLogo from '../images/visa.png'\r\nimport mastercardLogo from '../images/mastercard.png'\r\n\r\nexport default function ChoosePaymentMethod ({ onPaymentMethodChosen }) {\r\n\r\n    const fetchedUser = useFetchedUserData()\r\n    const [paymentMethods, setPaymentMethods] = React.useState(null)\r\n    const [chosenPmtMethod, setChosenPmtMethod] = React.useState(null)\r\n\r\n    React.useEffect(() => {\r\n        if (fetchedUser && fetchedUser?.user_metadata?.stripe?.paymentMethods) {\r\n            let { user_metadata: { stripe: { paymentMethods: pmts } } } = fetchedUser\r\n            setPaymentMethods(\r\n                Object.keys(pmts).map(key => pmts[key])\r\n            )\r\n        }\r\n    }, [fetchedUser])\r\n\r\n    React.useEffect(() => {\r\n        console.log(paymentMethods)\r\n    }, [paymentMethods])\r\n\r\n    React.useEffect(() => {\r\n        console.log(chosenPmtMethod)\r\n        if (onPaymentMethodChosen) {\r\n            onPaymentMethodChosen( chosenPmtMethod )\r\n        }\r\n    }, [chosenPmtMethod])\r\n\r\n    return <>\r\n        {\r\n            paymentMethods ?\r\n            <>\r\n                <br />\r\n                {\r\n                    chosenPmtMethod ?\r\n                    <img\r\n                        src={\r\n                        chosenPmtMethod.card.brand === 'visa' ? visaLogo\r\n                        :\r\n                            chosenPmtMethod.card.brand === 'mastercard' || chosenPmtMethod.card.brand === 'mc' ? mastercardLogo\r\n                            :\r\n                                null\r\n                        }\r\n                    />\r\n                    : null\r\n                }\r\n                <br />\r\n                {\r\n                    chosenPmtMethod ?\r\n                    <>\r\n                        <div>\r\n                            Selected Payment Method: &nbsp;\r\n                            <span>{ `${ chosenPmtMethod.card.brand }   *${ chosenPmtMethod.card.last4 }` }</span>\r\n                        </div>\r\n                        <div style={{ fontSize: '11px', color: '#ccc' }}>\r\n                            Payment Method ID: { chosenPmtMethod.id }\r\n                        </div>\r\n                    </>\r\n                    : <div>no payment method selected</div>\r\n                }\r\n                <br />\r\n                <select\r\n                    style={{ width: '200px' }}\r\n                    onChange={(event) => {\r\n                        console.log(event.target.value)\r\n                        setChosenPmtMethod(event.target.value !== 'none' ? JSON.parse(event.target.value) : null)\r\n                    }}\r\n                >\r\n                    <option value={'none'}>Choose payment method</option>\r\n                    {\r\n                        paymentMethods.map(pmtMethod => {\r\n                            return (\r\n                                <option value={ JSON.stringify(pmtMethod) }>\r\n                                    { pmtMethod.card.brand }   *{ pmtMethod.card.last4 }\r\n                                </option>\r\n                            )\r\n                        })\r\n                    }\r\n                </select>\r\n            </>\r\n            :\r\n            <>\r\n                <br />\r\n                <div>No payment methods have been set up</div>\r\n            </>\r\n        }\r\n    </>\r\n\r\n}","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\AddressInputBox.js",["152"],"import React from 'react'\r\nimport validator, { isEmpty, isLength, isNumeric } from 'validator'\r\nimport { includes } from 'lodash'\r\nimport './AddressInputBox.css'\r\nimport StyledButton from './StyledButton'\r\nimport useFetchedUserData from '../hooks/useFetchedUserData'\r\nimport { gymApiUrl } from '../utils/utils'\r\nimport useAuthToken from '../hooks/useAuthToken'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport function InputFieldErr ({ validators }) {\r\n\r\n    const checkValidators = () => {\r\n        if (includes(validators, false)) {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                 checkValidators() ? <></>\r\n                 :\r\n                 <div\r\n                    style={{ color: 'red' }}\r\n                    className='address-error-msg'>Please fill input field\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default function AddressInputBox () {\r\n\r\n    const history = useHistory()\r\n    const jwt = useAuthToken()\r\n    const fetchedUser = useFetchedUserData()\r\n    const [fetchedAddress, setFetchedAddress] = React.useState(null)\r\n    const [streetField, setStreetField] = React.useState('')\r\n    const [cityField, setCityField] = React.useState('')\r\n    const [stateField, setStateField] = React.useState('')\r\n    const [zipField, setZipField] = React.useState('')\r\n\r\n    const streetValidators = [ !isEmpty(streetField) ]\r\n    const cityValidators = [ !isEmpty(cityField) ]\r\n    const stateValidators = [\r\n        !isEmpty(stateField),\r\n        isLength(stateField, { min: 2, max: undefined })\r\n    ]\r\n    const zipValidators = [\r\n        !isEmpty(zipField),\r\n        isNumeric(zipField),\r\n        isLength(zipField, { min: 5, max: 5 })\r\n    ]\r\n    const validatorsArray = streetValidators\r\n    .concat(cityValidators)\r\n    .concat(stateValidators)\r\n    .concat(zipValidators)\r\n\r\n    const allFieldsValid = () => {\r\n        if (includes(validatorsArray, false)) {\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n    \r\n    React.useEffect(() => {\r\n        if (fetchedUser) {\r\n            let { user_metadata: { address: { city, state, street, zip } } } = fetchedUser\r\n            setCityField( city )\r\n            setStateField( state )\r\n            setStreetField( street )\r\n            setZipField( zip )\r\n            setFetchedAddress( { city, state, street, zip } )\r\n        }\r\n    }, [fetchedUser])\r\n\r\n    const submitAddressData = async () => {\r\n\r\n        setEditAddress( false )\r\n        if (fetchedUser && jwt) {\r\n            try {\r\n                // post to Auth0 /users endpoint\r\n                let { user_id, user_metadata } = fetchedUser\r\n                let auth0Response = await fetch(`${gymApiUrl}${user_id}`, {\r\n                    method: 'PATCH',\r\n                    body: JSON.stringify({\r\n                        user_metadata: {\r\n                            ...user_metadata,\r\n                            address: {\r\n                                street: streetField,\r\n                                city: cityField,\r\n                                state: stateField,\r\n                                zip: zipField\r\n                            }\r\n                        }                        \r\n                    }),\r\n                    headers: {\r\n                        'content-type': 'application/json',\r\n                        'authorization': `Bearer ${jwt.access_token}`\r\n                    }\r\n                })\r\n                let auth0ResResolved = await auth0Response.json()\r\n                console.log(\r\n                    auth0ResResolved\r\n                )\r\n\r\n                // post to Stripe\r\n                let stripeResponse = await fetch('/post-user-address-data', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({\r\n                        user: fetchedUser,\r\n                        street: streetField,\r\n                        city: cityField,\r\n                        state: stateField,\r\n                        zip: zipField\r\n                    }),\r\n                    headers: { 'content-type': 'application/json' }\r\n                })\r\n                let stripeResResolved = await stripeResponse.json()\r\n                console.log(\r\n                    stripeResResolved\r\n                )\r\n                let { address: { city, state, line1, postal_code } } = stripeResResolved\r\n                setCityField( city )\r\n                setStateField( state )\r\n                setStreetField( line1 )\r\n                setZipField( postal_code )\r\n                setFetchedAddress({\r\n                    city,\r\n                    state,\r\n                    street: line1,\r\n                    zip: postal_code\r\n                })\r\n                \r\n                history.push('/update-address/?updatedAddress=complete')\r\n\r\n            } catch (err) {\r\n                console.log(err)\r\n\r\n            }\r\n        }\r\n    \r\n    }\r\n    \r\n    const [editAddress, setEditAddress] = React.useState(false)\r\n    \r\n    return (\r\n        fetchedAddress && editAddress === false\r\n        ?\r\n        <>\r\n            <h2>\r\n                Your address on file <button style={{ display: 'inline' }} onClick={() => setEditAddress(true)}>Edit</button>\r\n            </h2>\r\n            <div>\r\n                { fetchedAddress.street }\r\n            </div>\r\n            <div>\r\n                { fetchedAddress.city }, { fetchedAddress.state } { fetchedAddress.zip }\r\n\r\n            </div>\r\n        </>\r\n        :\r\n        <>\r\n            <h2>Enter your address <button style={{ display: 'inline' }} onClick={() => setEditAddress(false)}>Cancel</button></h2>\r\n            <div\r\n            style={{ width: allFieldsValid() ? '300px' : '400px' }}\r\n            className='address-form-container-div'>\r\n                <form\r\n                className='Address_form'\r\n                onSubmit={(event) => {\r\n                    event.preventDefault()\r\n                    submitAddressData()\r\n                }}\r\n                >\r\n                    <br />\r\n                    <div className='address-input-group'>\r\n                        <label htmlFor='street'>Street: </label>\r\n                        <input\r\n                        id='street'                    \r\n                        type='text'\r\n                        value={streetField}\r\n                        onChange={(event) => { setStreetField( event.target.value ) }}\r\n                        />\r\n                    </div>\r\n                    <InputFieldErr\r\n                    validators={streetValidators}\r\n                    />\r\n                    <br />\r\n                    <br />\r\n\r\n                    <div className='address-input-group'>\r\n                        <label htmlFor='city'>City: </label>\r\n                        <input\r\n                        id='city'\r\n                        type='text'\r\n                        value={cityField}\r\n                        onChange={(event) => { setCityField( event.target.value ) }}\r\n                        />\r\n                    </div>\r\n                    <InputFieldErr\r\n                    validators={cityValidators}\r\n                    />\r\n                    <br />\r\n                    <br />\r\n                    \r\n                    <div className='address-input-group'>\r\n                        <label htmlFor='state'>State: </label>\r\n                        <input\r\n                        id='state'\r\n                        type='text'\r\n                        value={stateField}\r\n                        onChange={(event) => { setStateField( event.target.value ) }}\r\n                        />\r\n                    </div>\r\n                    <InputFieldErr\r\n                    validators={stateValidators}\r\n                    />\r\n                    <br />\r\n                    <br />\r\n                    \r\n                    <div className='address-input-group'>\r\n                        <label htmlFor='zip'>Zip: </label>\r\n                        <input\r\n                        id='zip'\r\n                        type='text'\r\n                        value={zipField}\r\n                        onChange={(event) => { setZipField( event.target.value ) }}\r\n                        />\r\n                    </div>\r\n                    <InputFieldErr\r\n                    validators={zipValidators}\r\n                    />\r\n                    <br />\r\n                    <br />\r\n\r\n                    {\r\n                        allFieldsValid() ?\r\n                        <>\r\n                            <br />\r\n                            <StyledButton\r\n                            role='submit'\r\n                            style={{ position: 'relative' }}\r\n                            >\r\n                                Submit\r\n                            </StyledButton>\r\n                            <br />\r\n                            <br />\r\n                        </>\r\n                        : <></>\r\n                    }\r\n\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}",{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","severity":1,"message":"158","line":13,"column":8,"nodeType":"159","messageId":"160","endLine":13,"endColumn":27},{"ruleId":"161","severity":1,"message":"162","line":1,"column":1,"nodeType":"163","endLine":122,"endColumn":3},{"ruleId":"153","replacedBy":"164"},{"ruleId":"155","replacedBy":"165"},{"ruleId":"161","severity":1,"message":"162","line":1,"column":1,"nodeType":"163","endLine":3,"endColumn":3},{"ruleId":"157","severity":1,"message":"166","line":87,"column":21,"nodeType":"159","messageId":"160","endLine":87,"endColumn":25},{"ruleId":"167","severity":1,"message":"168","line":104,"column":8,"nodeType":"169","endLine":104,"endColumn":27,"suggestions":"170"},{"ruleId":"161","severity":1,"message":"162","line":34,"column":1,"nodeType":"163","endLine":63,"endColumn":2},{"ruleId":"171","severity":1,"message":"172","line":57,"column":13,"nodeType":"173","endLine":60,"endColumn":15},{"ruleId":"157","severity":1,"message":"174","line":2,"column":29,"nodeType":"159","messageId":"160","endLine":2,"endColumn":35},{"ruleId":"157","severity":1,"message":"175","line":13,"column":10,"nodeType":"159","messageId":"160","endLine":13,"endColumn":22},{"ruleId":"157","severity":1,"message":"176","line":13,"column":24,"nodeType":"159","messageId":"160","endLine":13,"endColumn":41},{"ruleId":"157","severity":1,"message":"177","line":15,"column":7,"nodeType":"159","messageId":"160","endLine":15,"endColumn":20},{"ruleId":"178","severity":1,"message":"179","line":99,"column":36,"nodeType":"180","messageId":"181","endLine":99,"endColumn":38},{"ruleId":"178","severity":1,"message":"182","line":128,"column":47,"nodeType":"180","messageId":"181","endLine":128,"endColumn":49},{"ruleId":"178","severity":1,"message":"182","line":188,"column":19,"nodeType":"180","messageId":"181","endLine":188,"endColumn":21},{"ruleId":"157","severity":1,"message":"183","line":280,"column":50,"nodeType":"159","messageId":"160","endLine":280,"endColumn":61},{"ruleId":"153","replacedBy":"184"},{"ruleId":"155","replacedBy":"185"},{"ruleId":"167","severity":1,"message":"186","line":36,"column":8,"nodeType":"169","endLine":36,"endColumn":25,"suggestions":"187"},{"ruleId":"188","severity":1,"message":"189","line":109,"column":29,"nodeType":"190","messageId":"191","endLine":109,"endColumn":31},{"ruleId":"188","severity":1,"message":"189","line":110,"column":78,"nodeType":"190","messageId":"191","endLine":110,"endColumn":80},{"ruleId":"167","severity":1,"message":"192","line":61,"column":6,"nodeType":"169","endLine":61,"endColumn":16,"suggestions":"193"},{"ruleId":"194","severity":1,"message":"195","line":68,"column":13,"nodeType":"173","endLine":68,"endColumn":63},{"ruleId":"161","severity":1,"message":"162","line":4,"column":1,"nodeType":"163","endLine":11,"endColumn":2},{"ruleId":"157","severity":1,"message":"196","line":28,"column":17,"nodeType":"159","messageId":"160","endLine":28,"endColumn":20},{"ruleId":"167","severity":1,"message":"197","line":54,"column":8,"nodeType":"169","endLine":54,"endColumn":25,"suggestions":"198"},{"ruleId":"153","replacedBy":"199"},{"ruleId":"155","replacedBy":"200"},{"ruleId":"167","severity":1,"message":"201","line":56,"column":6,"nodeType":"169","endLine":56,"endColumn":27,"suggestions":"202"},{"ruleId":"167","severity":1,"message":"203","line":151,"column":6,"nodeType":"169","endLine":151,"endColumn":21,"suggestions":"204"},{"ruleId":"157","severity":1,"message":"205","line":380,"column":7,"nodeType":"159","messageId":"160","endLine":380,"endColumn":23},{"ruleId":"167","severity":1,"message":"206","line":30,"column":8,"nodeType":"169","endLine":30,"endColumn":25,"suggestions":"207"},{"ruleId":"171","severity":1,"message":"172","line":39,"column":21,"nodeType":"173","endLine":47,"endColumn":23},{"ruleId":"157","severity":1,"message":"208","line":2,"column":8,"nodeType":"159","messageId":"160","endLine":2,"endColumn":17},"no-native-reassign",["209"],"no-negated-in-lhs",["210"],"no-unused-vars","'ChoosePaymentMethod' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["209"],["210"],"'data' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'history' and 'location.search'. Either include them or remove the dependency array.","ArrayExpression",["211"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'reject' is defined but never used.","'PacmanLoader' is defined but never used.","'ClimbingBoxLoader' is defined but never used.","'stripePromise' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a value to be returned at the end of arrow function.","'pt_sessions' is assigned a value but never used.",["209"],["210"],"React Hook React.useEffect has a missing dependency: 'jwt'. Either include it or remove the dependency array.",["212"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","React Hook React.useEffect has missing dependencies: 'delayBeforeLeave', 'doAction', 'history', 'queryTerm', 'redirectPath', and 'timeout'. Either include them or remove the dependency array. If 'doAction' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["213"],"react/jsx-pascal-case","Imported JSX component ModalDiv_SlideIn must be in PascalCase or SCREAMING_SNAKE_CASE","'sec' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'setTOut'. Either include it or remove the dependency array.",["214"],["209"],["210"],"React Hook React.useEffect has missing dependencies: 'logout', 'user.sub', and 'user.user_id'. Either include them or remove the dependency array.",["215"],"React Hook React.useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["216"],"'ELEMENTS_OPTIONS' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'onPaymentMethodChosen'. Either include it or remove the dependency array. If 'onPaymentMethodChosen' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["217"],"'validator' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},"Update the dependencies array to be: [history, isAuthenticated, location.search]",{"range":"232","text":"233"},"Update the dependencies array to be: [isAuthenticated, jwt]",{"range":"234","text":"235"},"Update the dependencies array to be: [delayBeforeLeave, doAction, history, location, queryTerm, redirectPath, timeout]",{"range":"236","text":"237"},"Update the dependencies array to be: [isAuthenticated, setTOut]",{"range":"238","text":"239"},"Update the dependencies array to be: [stripeCustomer, jwt, user.user_id, user.sub, logout]",{"range":"240","text":"241"},"Update the dependencies array to be: [history, paymentMethod]",{"range":"242","text":"243"},"Update the dependencies array to be: [chosenPmtMethod, onPaymentMethodChosen]",{"range":"244","text":"245"},[3736,3755],"[history, isAuthenticated, location.search]",[1431,1448],"[isAuthenticated, jwt]",[1921,1931],"[delayBeforeLeave, doAction, history, location, queryTerm, redirectPath, timeout]",[2113,2130],"[isAuthenticated, setTOut]",[1697,1718],"[stripeCustomer, jwt, user.user_id, user.sub, logout]",[4725,4740],"[history, paymentMethod]",[1065,1082],"[chosenPmtMethod, onPaymentMethodChosen]"]