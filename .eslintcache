[{"C:\\Users\\EP\\Documents\\stripe-react\\src\\index.js":"1","C:\\Users\\EP\\Documents\\stripe-react\\src\\App.js":"2","C:\\Users\\EP\\Documents\\stripe-react\\src\\reportWebVitals.js":"3","C:\\Users\\EP\\Documents\\stripe-react\\src\\itemsList.js":"4","C:\\Users\\EP\\Documents\\stripe-react\\src\\productsList.js":"5","C:\\Users\\EP\\Documents\\stripe-react\\src\\Success.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":5547,"mtime":1611536692799,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":2537,"mtime":1611467539130,"results":"11","hashOfConfig":"8"},{"size":57,"mtime":1611472459384,"results":"12","hashOfConfig":"8"},{"size":5094,"mtime":1611540150000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1d30jjv",{"filePath":"17","messages":"18","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"C:\\Users\\EP\\Documents\\stripe-react\\src\\index.js",[],["31","32"],"C:\\Users\\EP\\Documents\\stripe-react\\src\\App.js",["33","34","35","36","37","38","39","40"],"import React from 'react'\nimport { loadStripe } from '@stripe/stripe-js'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useLocation\n} from 'react-router-dom'\nimport itemsList from './itemsList'\nimport { forEach, isEqual } from 'lodash'\nimport './App.css'\nimport productsList from './productsList'\nimport validator from 'validator'\nimport SuccessPage from './Success'\n\nconst stripePromise = loadStripe(process.env.REACT_APP_STRIPE_TEST_PUB_KEY)\n\nfunction App() {\n\n  return (\n    <div className='App'>\n      <Router>\n        <div>\n          {/* <nav>\n            <ul>\n              <li>\n                <Link to='/'>Home</Link>\n              </li>\n              <li>\n                <Link to='/success'>Success</Link>\n              </li>\n            </ul>\n          </nav> */}\n\n          <Switch>\n            <Route path='/success'>\n              <SuccessPage />\n            </Route>\n            <Route path='/'>\n              <Checkout />\n            </Route>\n          </Switch>\n\n        </div>\n      </Router>\n    </div>\n  )\n\n}\n\nexport default App\n\nexport const convertToDollar = priceNum => {\n  let amt = priceNum.toString()\n  let dollarAmt = amt.split('')\n  dollarAmt.pop()\n  dollarAmt.pop()\n  dollarAmt.push('.00')\n  dollarAmt = dollarAmt.join('')\n  return dollarAmt\n}\n\nexport function Checkout () {\n\n  const [products, setProducts] = React.useState(null)\n\n  React.useEffect(() => {\n\n    let response = fetch('/get-list-of-products', {\n      method: 'GET'\n    })\n    .then(response => response.json())\n    .catch(err => console.log(err))\n    \n    response\n    .then(data => {\n      setProducts(data.products)\n    })\n    .catch(err => console.log(err))\n\n  }, [])\n\n  const handleClick = async event => {\n\n    if (shoppingCart.length > 0) {\n\n      // Get Stripe.js instance\n      const stripe = await stripePromise\n      // Call your backend to create the Checkout Session\n      const response = await fetch('/create-checkout-session', {\n        method: 'POST',\n        body: JSON.stringify({\n          line_items: shoppingCart\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      const session = await response.json()\n      // When the customer clicks on the button, redirect them to the Checkout \n      const result = await stripe.redirectToCheckout({\n        sessionId: session.id\n      })\n  \n      if (result.error) {\n        // If `redirectToCheckout` fails due to a browser or network\n        // error, display the localized error message to your customer\n        // using `result.error.message`.\n      }\n\n    } else {\n      console.log(\n        'there is nothing in your shopping cart'\n      )\n    }\n\n  }\n\n  const [itemsChecked, setItemsChecked] = React.useState({})\n  const [shoppingCart, setShoppingCart] = React.useState([])\n\n  const updateCart = product => {\n    setItemsChecked({\n      [product.id]: !itemsChecked[product.id]\n    })\n\n    let inCart = false\n    let itemToAdd = { price: product.metadata.price_id, quantity: 1 }\n    shoppingCart.forEach(item => {\n      if (isEqual(item, itemToAdd)) {\n        inCart = true\n      }\n    })\n\n    if (!inCart) {\n      setShoppingCart(() => ([\n        ...shoppingCart,\n        itemToAdd\n      ]))\n    } else {\n      setShoppingCart(() => (\n        shoppingCart.filter(item => {\n          if (!isEqual(item, itemToAdd)) {\n            return item\n          }\n        })\n      ))\n    }\n\n  }\n\n  return (\n    <>\n      <br />\n      <div>\n        Stripe Testing Checkout\n      </div>\n      <br />\n      <div>\n        {\n          products ?\n          products\n          .map(product => (\n            <>\n              <div\n              style={{\n                'alignItems': 'center',\n                'border': '1px solid #ccc',\n                'borderRadius': '3px',\n                'padding': '20px',\n                'width': '300px',\n                'position': 'absolute',\n                'margin': 'auto',\n                'left': 0,\n                'right': 0\n              }}\n              >\n                <span>\n                  <div key={product.id}>\n                    { product.name }\n                  </div>\n                  <div>\n                    { product.statement_descriptor }\n                  </div>\n                  <div>\n                    ${ convertToDollar( product.metadata.price ) }\n                  </div>\n                  <input\n                  type='checkbox'\n                  checked={itemsChecked[product.id]}\n                  onChange={() => { updateCart(product) }}\n                  />\n                </span>\n                <img\n                style={{\n                  'width': '100px'\n                }}\n                src={ product.images[0] }\n                />                \n              </div>\n            </>\n          ))\n          : null\n        }\n      </div>\n      <br />\n      <button\n      style={{\n        'padding': '20px',\n        'border': 'none',\n        'borderRadius': '2px',\n        'bottom': '40px',\n        'position': 'absolute',\n        'left': 0,\n        'right': 0,\n        'width': '120px',\n        'margin': 'auto'\n      }}\n      type='button' role='link'\n      onClick={handleClick}>\n        Checkout\n      </button>\n    </>\n  )\n}\n\n// -- line items: format -- \n//\n// {\n//   price_data: {\n//       currency: 'usd',\n//       product_data: {\n//           name: 'Monthly subscription',\n//       },\n//       unit_amount: 2500,\n//       recurring: {\n//          interval: 'month',\n//          interval_count: 1\n//       }\n//   },\n//   quantity: 1,\n// }\n","C:\\Users\\EP\\Documents\\stripe-react\\src\\reportWebVitals.js",[],"C:\\Users\\EP\\Documents\\stripe-react\\src\\itemsList.js",["41"],"export default () => ([\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Gummy Bears'\r\n            },\r\n            unit_amount: 100\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Camisa'\r\n            },\r\n            unit_amount: 2500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Shirt'\r\n            },\r\n            unit_amount: 2000\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Pants'\r\n            },\r\n            unit_amount: 3500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Shoes'\r\n            },\r\n            unit_amount: 7500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Jacket'\r\n            },\r\n            unit_amount: 18500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Flops'\r\n            },\r\n            unit_amount: 1000\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Hat'\r\n            },\r\n            unit_amount: 1500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Suit'\r\n            },\r\n            unit_amount: 25500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Tie'\r\n            },\r\n            unit_amount: 4000\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Dress Shoes'\r\n            },\r\n            unit_amount: 12000\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Nikes'\r\n            },\r\n            unit_amount: 35500\r\n        },\r\n        quantity: 1\r\n    },\r\n])\r\n","C:\\Users\\EP\\Documents\\stripe-react\\src\\productsList.js",["42"],"export default () => ([\r\n    'prod_IofQI7lk3rL1Qq',\r\n])\r\n","C:\\Users\\EP\\Documents\\stripe-react\\src\\Success.js",["43","44","45"],"import React from 'react'\r\nimport style from './Success.css'\r\nimport { useLocation } from 'react-router-dom'\r\nimport validator from 'validator'\r\nimport { isEqual } from 'lodash'\r\n\r\nexport default function SuccessPage () {\r\n\r\n    const location = useLocation()\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        // send data to an endpoint to store student info\r\n        \r\n    }\r\n\r\n    const [firstNameField, setFirstNameField] = React.useState('')\r\n    const [lastNameField, setLastNameField] = React.useState('')\r\n    const [emailField, setEmailField] = React.useState('')\r\n    const [passwordField, setPasswordField] = React.useState('')\r\n    const [passwordConfirmField, setPasswordConfirmField] = React.useState('')\r\n\r\n    React.useEffect(() => {\r\n        // get session data to populate form fields\r\n        let session_id = location.search.split('=')[1]\r\n        let response = fetch('/get-checkout-session', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            session_id\r\n        }),\r\n        headers: {\r\n            'Content-type': 'application/json'\r\n        }\r\n        })\r\n        .then(response => response.json())\r\n        .catch(err => console.log(err))\r\n        \r\n        response\r\n        .then(data => {\r\n        let { customer } = data\r\n        setEmailField(customer.email)\r\n        console.log(customer)\r\n        })\r\n        .catch(err => console.log(err))\r\n\r\n    }, [])\r\n\r\n    const allFieldsValid = () => {\r\n        if (\r\n            (!validator.isEmpty(passwordField) || validator.isLength(passwordField, { min: 8, max: 100 })) &&\r\n            isEqual(passwordField, passwordConfirmField) &&\r\n            !validator.isEmpty(firstNameField) && !validator.isEmpty(lastNameField) &&\r\n            validator.isEmail(emailField)\r\n        ) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <br />\r\n        <div>\r\n            Payment was successful! Please finish setting up your profile\r\n        </div>\r\n        <br />\r\n        <form onSubmit={handleSubmit}>\r\n            <label htmlFor='first-name'>First name: &nbsp;</label>\r\n            <input\r\n            id='first-name' type='text'\r\n            onChange={(event) => {\r\n            setFirstNameField(event.target.value)\r\n            }}\r\n            value={firstNameField}\r\n            />\r\n            <div style={{ color: 'red' }} >\r\n            {\r\n                validator.isEmpty(firstNameField) ?\r\n                'enter a name' : null\r\n            }\r\n            </div>\r\n            <br />\r\n            <br />\r\n            <label htmlFor='last-name'>Last name: &nbsp;</label>\r\n            <input\r\n            id='last-name' type='text'\r\n            onChange={(event) => {\r\n            setLastNameField(event.target.value)\r\n            }}\r\n            value={lastNameField}\r\n            />\r\n            <div style={{ color: 'red' }} >\r\n            {\r\n                validator.isEmpty(lastNameField) ?\r\n                'enter a last name' : null\r\n            }\r\n            </div>\r\n            <br />\r\n            <br />\r\n            <label htmlFor='email'>Email address: &nbsp;</label>\r\n            <input\r\n            id='email' type='text'\r\n            value={emailField}\r\n            onChange={(event) => {\r\n            setEmailField(event.target.value)\r\n            }}\r\n            />\r\n            <div style={{ color: 'red' }} >\r\n            {\r\n                !validator.isEmail(emailField) ?\r\n                'enter a valid email' : null\r\n            }\r\n            </div>\r\n            <br />\r\n            <br />\r\n            <label htmlFor='password'>Password: &nbsp;</label>\r\n            <input\r\n            id='password' type='password'\r\n            value={passwordField}\r\n            onChange={(event) => {\r\n                setPasswordField(event.target.value)\r\n            }}\r\n            />\r\n            <div style={{ color: 'red' }} >\r\n                {\r\n                    validator.isEmpty(passwordField) || !validator.isLength(passwordField, { min: 8, max: 100 })\r\n                    ? '8 char. minimum'\r\n                    : null\r\n                }\r\n            </div>\r\n            <br />\r\n            <br />\r\n            <label htmlFor='password-confirm'>Confirm Password: &nbsp;</label>\r\n            <input\r\n            id='password-confirm' type='password'\r\n            value={passwordConfirmField}\r\n            onChange={(event) => {\r\n                setPasswordConfirmField(event.target.value)\r\n            }}\r\n            />\r\n            <div style={{ color: 'red' }}>\r\n                {\r\n                    !isEqual(passwordField, passwordConfirmField)\r\n                    ? 'passwords do not match'\r\n                    : null \r\n                }\r\n            </div>\r\n            <br />\r\n            <br />\r\n            {\r\n                allFieldsValid() ?\r\n                <button type='submit' role='button'>\r\n                    Complete Enrollment\r\n                </button>\r\n                : null\r\n            }\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":7,"column":3,"nodeType":"52","messageId":"53","endLine":7,"endColumn":7},{"ruleId":"50","severity":1,"message":"54","line":8,"column":3,"nodeType":"52","messageId":"53","endLine":8,"endColumn":14},{"ruleId":"50","severity":1,"message":"55","line":10,"column":8,"nodeType":"52","messageId":"53","endLine":10,"endColumn":17},{"ruleId":"50","severity":1,"message":"56","line":11,"column":10,"nodeType":"52","messageId":"53","endLine":11,"endColumn":17},{"ruleId":"50","severity":1,"message":"57","line":13,"column":8,"nodeType":"52","messageId":"53","endLine":13,"endColumn":20},{"ruleId":"50","severity":1,"message":"58","line":14,"column":8,"nodeType":"52","messageId":"53","endLine":14,"endColumn":17},{"ruleId":"59","severity":1,"message":"60","line":143,"column":34,"nodeType":"61","messageId":"62","endLine":143,"endColumn":36},{"ruleId":"63","severity":1,"message":"64","line":195,"column":17,"nodeType":"65","endLine":200,"endColumn":19},{"ruleId":"66","severity":1,"message":"67","line":1,"column":1,"nodeType":"68","endLine":122,"endColumn":3},{"ruleId":"66","severity":1,"message":"67","line":1,"column":1,"nodeType":"68","endLine":3,"endColumn":3},{"ruleId":"50","severity":1,"message":"69","line":2,"column":8,"nodeType":"52","messageId":"53","endLine":2,"endColumn":13},{"ruleId":"70","severity":1,"message":"71","line":46,"column":8,"nodeType":"72","endLine":46,"endColumn":10,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":153,"column":17,"nodeType":"65","endLine":153,"endColumn":53},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useLocation' is defined but never used.","'itemsList' is defined but never used.","'forEach' is defined but never used.","'productsList' is defined but never used.","'validator' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'style' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'location.search'. Either include it or remove the dependency array.","ArrayExpression",["78"],"jsx-a11y/no-redundant-roles","The element button has an implicit role of button. Defining this explicitly is redundant and should be avoided.","no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},"Update the dependencies array to be: [location.search]",{"range":"81","text":"82"},[1437,1439],"[location.search]"]