[{"C:\\Users\\EP\\Documents\\stripe-react\\src\\index.js":"1","C:\\Users\\EP\\Documents\\stripe-react\\src\\App.js":"2","C:\\Users\\EP\\Documents\\stripe-react\\src\\reportWebVitals.js":"3","C:\\Users\\EP\\Documents\\stripe-react\\src\\itemsList.js":"4","C:\\Users\\EP\\Documents\\stripe-react\\src\\productsList.js":"5","C:\\Users\\EP\\Documents\\stripe-react\\src\\Success.js":"6","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\StyledButton.js":"7","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\ProductBox.js":"8","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\Checkout.js":"9","C:\\Users\\EP\\Documents\\stripe-react\\src\\hooks\\useFetchedUserData.js":"10","C:\\Users\\EP\\Documents\\stripe-react\\src\\utils\\utils.js":"11","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\UpdateUserDataForm.js":"12","C:\\Users\\EP\\Documents\\stripe-react\\src\\hooks\\useAuthToken.js":"13","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\DrawerComponent.js":"14","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\ActionModal.js":"15","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\AppHeader.js":"16","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\ProfileDataPage.js":"17","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\BugerButton.js":"18","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\LogoutTimer.js":"19","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\CreditCardEntry.js":"20","C:\\Users\\EP\\Documents\\stripe-react\\src\\hooks\\useCreateStripeCustomer.js":"21","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\StripeCardEntryExample.js":"22"},{"size":735,"mtime":1611682596830,"results":"23","hashOfConfig":"24"},{"size":3527,"mtime":1611984072967,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"26","hashOfConfig":"24"},{"size":2537,"mtime":1611467539130,"results":"27","hashOfConfig":"24"},{"size":57,"mtime":1611472459384,"results":"28","hashOfConfig":"24"},{"size":4480,"mtime":1611855402264,"results":"29","hashOfConfig":"24"},{"size":696,"mtime":1611984072974,"results":"30","hashOfConfig":"24"},{"size":1677,"mtime":1611626131223,"results":"31","hashOfConfig":"24"},{"size":4074,"mtime":1611854615480,"results":"32","hashOfConfig":"24"},{"size":1206,"mtime":1611983601331,"results":"33","hashOfConfig":"24"},{"size":335,"mtime":1611780186530,"results":"34","hashOfConfig":"24"},{"size":10388,"mtime":1611984072975,"results":"35","hashOfConfig":"24"},{"size":1472,"mtime":1611984245728,"results":"36","hashOfConfig":"24"},{"size":4136,"mtime":1611984072971,"results":"37","hashOfConfig":"24"},{"size":1983,"mtime":1611820426087,"results":"38","hashOfConfig":"24"},{"size":1024,"mtime":1611984072970,"results":"39","hashOfConfig":"24"},{"size":1957,"mtime":1611984415632,"results":"40","hashOfConfig":"24"},{"size":294,"mtime":1611807335603,"results":"41","hashOfConfig":"24"},{"size":2156,"mtime":1611854844319,"results":"42","hashOfConfig":"24"},{"size":2424,"mtime":1611860900891,"results":"43","hashOfConfig":"24"},{"size":2504,"mtime":1611984203856,"results":"44","hashOfConfig":"24"},{"size":16266,"mtime":1611984072973,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1d30jjv",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"48"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"48"},"C:\\Users\\EP\\Documents\\stripe-react\\src\\index.js",[],["106","107"],"C:\\Users\\EP\\Documents\\stripe-react\\src\\App.js",[],"C:\\Users\\EP\\Documents\\stripe-react\\src\\reportWebVitals.js",[],"C:\\Users\\EP\\Documents\\stripe-react\\src\\itemsList.js",["108"],"export default () => ([\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Gummy Bears'\r\n            },\r\n            unit_amount: 100\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Camisa'\r\n            },\r\n            unit_amount: 2500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Shirt'\r\n            },\r\n            unit_amount: 2000\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Pants'\r\n            },\r\n            unit_amount: 3500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Shoes'\r\n            },\r\n            unit_amount: 7500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Jacket'\r\n            },\r\n            unit_amount: 18500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Flops'\r\n            },\r\n            unit_amount: 1000\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Hat'\r\n            },\r\n            unit_amount: 1500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Suit'\r\n            },\r\n            unit_amount: 25500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Tie'\r\n            },\r\n            unit_amount: 4000\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Dress Shoes'\r\n            },\r\n            unit_amount: 12000\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Nikes'\r\n            },\r\n            unit_amount: 35500\r\n        },\r\n        quantity: 1\r\n    },\r\n])\r\n",["109","110"],"C:\\Users\\EP\\Documents\\stripe-react\\src\\productsList.js",["111"],"export default () => ([\r\n    'prod_IofQI7lk3rL1Qq',\r\n])\r\n","C:\\Users\\EP\\Documents\\stripe-react\\src\\Success.js",["112","113"],"import React from 'react'\r\nimport { useLocation, useHistory } from 'react-router-dom'\r\nimport { useAuth0 } from '@auth0/auth0-react'\r\nimport UpdateUserDataForm from './components/UpdateUserDataForm'\r\nimport useAuthToken from './hooks/useAuthToken'\r\nimport useFetchedUserData from './hooks/useFetchedUserData'\r\n\r\nfunction usePatchStripeSessionData (stripeSession) {\r\n\r\n    const [res, setRes] = React.useState(null)\r\n    const jwt = useAuthToken()\r\n    const user = useFetchedUserData()\r\n\r\n    React.useEffect(() => {\r\n\r\n        if (user && jwt && stripeSession) {\r\n            let status, statusCode\r\n            let subscriptions =\r\n                user.user_metadata?.subscriptions ? user.user_metadata.subscriptions.push(stripeSession.subscription)\r\n                : [ stripeSession.subscription ]\r\n            fetch(`https://gymwebapp.us.auth0.com/api/v2/users/${user.user_id}`, {\r\n                method: 'PATCH',\r\n                body: JSON.stringify({\r\n                    user_metadata: {\r\n                        stripe: {\r\n                            customer: user.user_metadata?.customer ? user.user_metadata.customer : stripeSession.customer,\r\n                            subscriptions: subscriptions !== user.user_metadata.subscriptions ? subscriptions : user.user_metadata.subscriptions\r\n                        }\r\n                    }\r\n                }),\r\n                headers: {\r\n                    'content-type': 'application/json',\r\n                    'authorization': `Bearer ${jwt.access_token}`\r\n                }\r\n            })\r\n            .then(response => {\r\n                status = response.status\r\n                return response.json()\r\n            })\r\n            .then(data => {\r\n                console.log(data)\r\n                setRes(data)\r\n                statusCode = data.statusCode ? data.statusCode : null\r\n                // setTimeout(() => {\r\n                //     history.push(`/?${queryKey}=${queryValue}`)\r\n                // }, 250)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                if (status === 401  || statusCode === 401) {\r\n                    if (localStorage.getItem('gym-app-jwt')) {\r\n                        localStorage.removeItem('gym-app-jwt')\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n    }, [user, jwt, stripeSession])\r\n\r\n    return res\r\n\r\n}\r\n\r\nexport default function SuccessPage () {\r\n\r\n    const location = useLocation()\r\n    const history = useHistory()\r\n    const { isLoading, isAuthenticated, user } = useAuth0()\r\n    const [stripeSession, setStripeSession] = React.useState(null)\r\n    usePatchStripeSessionData(stripeSession)\r\n\r\n    React.useEffect(() => {\r\n        console.log(\r\n            stripeSession\r\n        )\r\n    }, [stripeSession])\r\n\r\n    React.useEffect(() => {\r\n        // get session data to populate form fields\r\n        let session_id\r\n        if (location.search) {\r\n            session_id = location.search.split('=')[1]\r\n        }\r\n        if (session_id) {\r\n            if (isAuthenticated === true) {\r\n                // get stripe customer data \r\n                let data = fetch('/get-checkout-session', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ session_id }),\r\n                        headers: { 'Content-type': 'application/json' }\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    let { session } = data\r\n                    setStripeSession(session)\r\n                })\r\n                .catch(err => console.log(err))\r\n            }\r\n        } else {\r\n            // redirect to home\r\n            history.push('/')\r\n        }\r\n\r\n    }, [ isAuthenticated ])\r\n\r\n    const markup = () => (\r\n        <>\r\n            <br />\r\n            <div>\r\n                Payment was successful! Please finish setting up your profile\r\n            </div>\r\n            <br />\r\n            <UpdateUserDataForm\r\n            user={user}\r\n            onCompleteParams={{\r\n                queryKey: 'profileSetup',\r\n                queryValue: 'complete',\r\n            }}\r\n            submitLabel={ 'Complete Enrollment' }\r\n            />\r\n        </>\r\n    )\r\n\r\n    return (\r\n        <>\r\n        {\r\n            isLoading\r\n            ? <><br /><div>Loading...</div></>\r\n            :\r\n                isAuthenticated\r\n                ? markup()\r\n                : null\r\n        }\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\StyledButton.js",[],"C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\ProductBox.js",["114","115"],"import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledProductBoxDiv = styled.div`\r\nuser-select: none;\r\nalign-items: center;\r\nborder: 2px solid slateblue;\r\ncolor: darkslateblue;\r\nborder-radius: 3px;\r\npadding: 20px;\r\nwidth: 300px;\r\nposition: absolute;\r\nmargin: auto;\r\nleft: 0;\r\nright: 0;\r\ntransform: scale(1.00);\r\ntransition: all .35s;\r\ncursor: pointer;\r\n&:hover {\r\n    transform: scale(1.05);\r\n    transition: all .35s;\r\n}\r\n`\r\n\r\nexport const convertToDollar = priceNum => {\r\n    let amt = priceNum.toString()\r\n    let dollarAmt = amt.split('')\r\n    dollarAmt.pop()\r\n    dollarAmt.pop()\r\n    dollarAmt.push('.00')\r\n    dollarAmt = dollarAmt.join('')\r\n    return dollarAmt\r\n}\r\n\r\nexport default ({ product, itemsChecked, updateCart }) => (\r\n    <>\r\n        <StyledProductBoxDiv\r\n        onClick={() => { updateCart(product) }}\r\n        >\r\n            <span>\r\n                <div key={product.id}>\r\n                { product.name }\r\n                </div>\r\n                <div>\r\n                { product.statement_descriptor }\r\n                </div>\r\n                <div>\r\n                ${ convertToDollar( product.metadata.price ) }\r\n                </div>\r\n                <input\r\n                style={{\r\n                    position: 'relative',\r\n                    right: '20px'\r\n                }}\r\n                type='checkbox'\r\n                checked={itemsChecked[product.id]}\r\n                onChange={() => { updateCart(product) }}\r\n                />\r\n            </span>\r\n            <img\r\n            style={{ 'width': '100px' }}\r\n            src={ product.images[0] }\r\n            />\r\n        </StyledProductBoxDiv>\r\n    </>\r\n)","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\Checkout.js",["116"],"import React from 'react'\r\nimport { isEqual } from 'lodash'\r\nimport { loadStripe } from '@stripe/stripe-js'\r\nimport StyledButton from './StyledButton'\r\nimport ProductBox from './ProductBox'\r\nimport { useAuth0 } from '@auth0/auth0-react'\r\nimport useFetchedUserData from '../hooks/useFetchedUserData'\r\n\r\nconst stripePromise = loadStripe(process.env.REACT_APP_STRIPE_TEST_PUB_KEY)\r\n\r\nexport default function Checkout () {\r\n\r\n    const [products, setProducts] = React.useState(null)\r\n    const [itemsChecked, setItemsChecked] = React.useState({})\r\n    const [shoppingCart, setShoppingCart] = React.useState([])\r\n    const { isAuthenticated, isLoading } = useAuth0()\r\n    const fetchedUser = useFetchedUserData()\r\n\r\n    React.useEffect(() => {\r\n  \r\n      let response = fetch('/get-list-of-products', {\r\n        method: 'GET'\r\n      })\r\n      .then(response => response.json())\r\n      .catch(err => console.log(err))\r\n      \r\n      response\r\n      .then(data => {\r\n        setProducts(data.products)\r\n      })\r\n      .catch(err => console.log(err))\r\n  \r\n    }, [])\r\n  \r\n    const handleClick = async event => {\r\n      if (!fetchedUser) {\r\n        console.log(\r\n          'could not get auth0 fetched user object'\r\n        )\r\n      }\r\n      if (shoppingCart.length > 0) {\r\n        // Get Stripe.js instance\r\n        const stripe = await stripePromise\r\n        // Call your backend to create the Checkout Session\r\n        const response = await fetch('/create-checkout-session', {\r\n          method: 'POST',\r\n          body: JSON.stringify({\r\n            email: fetchedUser ? fetchedUser.email : null,\r\n            line_items: shoppingCart\r\n          }),\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        })\r\n        const session = await response.json()\r\n        // When the customer clicks on the button, redirect them to the Checkout \r\n        const result = await stripe.redirectToCheckout({\r\n          sessionId: session.id\r\n        })\r\n    \r\n        if (result.error) {\r\n          // If `redirectToCheckout` fails due to a browser or network\r\n          // error, display the localized error message to your customer\r\n          // using `result.error.message`.\r\n        }\r\n  \r\n      } else {\r\n        console.log(\r\n          'there is nothing in your shopping cart'\r\n        )\r\n      }\r\n  \r\n    }\r\n  \r\n    const updateCart = product => {\r\n      setItemsChecked({\r\n        [product.id]: !itemsChecked[product.id]\r\n      })\r\n  \r\n      let inCart = false\r\n      let itemToAdd = { price: product.metadata.price_id, quantity: 1 }\r\n      shoppingCart.forEach(item => {\r\n        if (isEqual(item, itemToAdd)) {\r\n          inCart = true\r\n        }\r\n      })\r\n  \r\n      if (!inCart) {\r\n        setShoppingCart(() => ([\r\n          ...shoppingCart,\r\n          itemToAdd\r\n        ]))\r\n      } else {\r\n        setShoppingCart(() => (\r\n          shoppingCart.filter(item => {\r\n            if (!isEqual(item, itemToAdd)) {\r\n              return item\r\n            }\r\n          })\r\n        ))\r\n      }\r\n  \r\n    }\r\n\r\n    const markup = () => (\r\n        <>\r\n        <br />\r\n        <div>\r\n          Enroll in Classes\r\n        </div>\r\n        <br />\r\n        <div>\r\n          {\r\n            products ?\r\n            products\r\n            .map(product => (\r\n              <ProductBox\r\n              itemsChecked={itemsChecked}\r\n              updateCart={updateCart}\r\n              product={product}\r\n              />\r\n            ))\r\n            : null\r\n          }\r\n        </div>\r\n        <br />\r\n        <StyledButton\r\n        style={{\r\n          left: 0,\r\n          right: 0,\r\n          bottom: '40px',\r\n          position: 'absolute',\r\n          margin: 'auto'\r\n        }}\r\n        type='button' role='link'\r\n        onClick={handleClick}>\r\n          Checkout\r\n        </StyledButton>\r\n      </>\r\n    )\r\n    \r\n    return (\r\n        <>\r\n        {\r\n            isLoading\r\n            ? <><br/><div>Loading...</div></>\r\n            :\r\n                isAuthenticated\r\n                ? markup()\r\n                : null\r\n        }\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\EP\\Documents\\stripe-react\\src\\hooks\\useFetchedUserData.js",[],"C:\\Users\\EP\\Documents\\stripe-react\\src\\utils\\utils.js",[],"C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\UpdateUserDataForm.js",[],"C:\\Users\\EP\\Documents\\stripe-react\\src\\hooks\\useAuthToken.js",["117"],"import React from 'react'\r\nimport { useAuth0 } from '@auth0/auth0-react'\r\n\r\nexport default function useAuthToken () {\r\n\r\n    const [jwt, setJwt] = React.useState(null)\r\n    const { isAuthenticated } = useAuth0()\r\n\r\n    React.useEffect(() => {\r\n        console.log(\r\n        'user auth: ', isAuthenticated\r\n        )\r\n        if (isAuthenticated === true) {\r\n            if (window.localStorage && !localStorage.getItem('gym-app-jwt')) {\r\n                fetch('/retrieve-api-token', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-type': 'application/json' }\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    console.log(data)\r\n                    setJwt(data)\r\n                    localStorage.setItem('gym-app-jwt', JSON.stringify(data))\r\n                    // we will update this to send the jwt to our mongo db for better security...\r\n                    // we will then need to blacklist or invalidate old jwt tokens as well\r\n                    // but for now, let's make a request using the jwt! (at Success component)\r\n                    // request will be PATCH to update user \r\n                })\r\n                .catch(err => console.log(err))\r\n            } else {\r\n                console.log(jwt)\r\n                setJwt(JSON.parse(localStorage.getItem('gym-app-jwt')))\r\n            }\r\n        }\r\n\r\n    }, [isAuthenticated])\r\n\r\n    return jwt\r\n\r\n}","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\DrawerComponent.js",["118","119"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport useFetchedUserData from '../hooks/useFetchedUserData'\r\n// import useFetchedUserData from '../hooks/useFetchedUserData'\r\nimport StyledButton, { GreyedOutButton } from './StyledButton'\r\n\r\nfunction DrawerLeftPanel ({ updatedProfile, drawerOpen, setDrawerOpen }) {\r\n  \r\n  const fetchedUser = useFetchedUserData()\r\n  // const [fetchedUserUpdated, setFetchedUserUpdated] = React.useState(false)\r\n\r\n  // const shouldRenderEnrollButton = () => {\r\n  //   if (\r\n  //     fetchedUser && fetchedUser.given_name && fetchedUser.family_name &&\r\n  //     (fetchedUser.user_metadata?.mobile ? fetchedUser.user_metadata.mobile : null)\r\n  //     ) {\r\n  //     return true\r\n  //   }\r\n  //   return false\r\n  // }\r\n\r\n  // React.useEffect(() => {\r\n    \r\n  //   setFetchedUserUpdated(\r\n  //     shouldRenderEnrollButton()\r\n  //   )\r\n\r\n  // }, [fetchedUser])\r\n\r\n  return (\r\n    <>\r\n    {\r\n      drawerOpen ?\r\n      <div\r\n        className={'SidePanel_container'}\r\n        style={{\r\n          width: '300px',\r\n          height: '100vh',\r\n          position: 'absolute',\r\n          left: 0, top: 0,\r\n          color: 'white',\r\n          zIndex: 100,\r\n          backgroundColor: 'white',\r\n          boxShadow: '1px 1px 2px 2px rgba(0, 0, 0, 0.2)'\r\n        }}\r\n        >\r\n          <StyledButton\r\n          onClick={() => setDrawerOpen(false)}\r\n          style={{ position: 'absolute', right: '10px', top: '10px', width: '50px', backgroundColor: 'royalblue', border: '1px solid darkblue' }}\r\n          >\r\n            &#8678;\r\n          </StyledButton>\r\n          <h4\r\n          style={{\r\n            margin: 0,\r\n            padding: '25px 0 25px 0',\r\n            backgroundColor: 'royalblue',\r\n          }}\r\n          >\r\n            Account\r\n          </h4>\r\n\r\n          <br />\r\n          <Link to='/'>\r\n            <StyledButton\r\n              onClick={() => setDrawerOpen(false)}\r\n              style={{ backgroundColor: 'royalblue' }}\r\n            >\r\n              Profile Info\r\n            </StyledButton>\r\n          </Link>\r\n          <br />\r\n          \r\n          <br />\r\n          <Link to='/update-profile'>\r\n            <StyledButton\r\n            onClick={() => setDrawerOpen(false)}\r\n            style={{ backgroundColor: 'royalblue' }}\r\n            >\r\n              Update profile info\r\n            </StyledButton>\r\n          </Link>\r\n          <br />\r\n\r\n          <br />\r\n          <Link to='/setup-payment-method'>\r\n            <StyledButton\r\n            onClick={() => setDrawerOpen(false)}\r\n            style={{ backgroundColor: 'royalblue' }}\r\n            >\r\n              Save a Payment Method\r\n            </StyledButton>\r\n          </Link>\r\n          <br />\r\n          \r\n          <br />\r\n          {\r\n            (updatedProfile ||\r\n            fetchedUser && fetchedUser.given_name && fetchedUser.family_name &&\r\n            (fetchedUser.user_metadata?.mobile ? fetchedUser.user_metadata.mobile : null))\r\n            ?\r\n              <Link to='/checkout'>\r\n                <StyledButton\r\n                  onClick={() => setDrawerOpen(false)}\r\n                  style={{ backgroundColor: 'royalblue' }}\r\n                >\r\n                  Enroll in Classes\r\n                </StyledButton>\r\n              </Link>\r\n            :\r\n              <GreyedOutButton\r\n                style={{ backgroundColor: '#ccc' }}\r\n              >\r\n                Enroll in Classes\r\n              </GreyedOutButton>\r\n          }\r\n          <br />\r\n\r\n        </div>\r\n      : null\r\n    }\r\n    </>\r\n  )\r\n}\r\n  \r\nfunction DarkenDiv ({ drawerOpen, setDrawerOpen }) {\r\n    return (\r\n        <>\r\n        {\r\n            drawerOpen ?\r\n            <div\r\n            onClick={() => setDrawerOpen(false)}\r\n            className={'bg-darken'}\r\n            style={{\r\n            top: 0,\r\n            left: 0,\r\n            width: '100vw',\r\n            height: '100vh',\r\n            position: 'absolute',\r\n            backgroundColor: 'rgba(0, 0, 0, 0.25)'\r\n            }}\r\n            ></div>\r\n            : null\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport {\r\n    DrawerLeftPanel,\r\n    DarkenDiv\r\n}\r\n","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\ActionModal.js",["120","121"],"import React from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { useLocation, useHistory } from 'react-router-dom'\r\n\r\nconst ModalDiv_SlideIn = styled.div`\r\ncolor: white;\r\npositon: absolute;\r\npadding: 10px 25px;\r\nborder-radius: 3px;\r\nbackground-color: mediumseagreen;\r\nbox-shadow: 1px 1px 2px 2px rgba(0, 0, 0, 0.2);\r\ntransform: translateX(-100vw);\r\ntransition: transform .5s ease-out;\r\n${props => props.slide === 'in' && css`\r\n  transform: translateX(0px);\r\n`}\r\n${props => props.slide === 'out' && css`\r\n  transform: translateX(200vw);\r\n`}\r\n`\r\n\r\nfunction ActionModal ({ doAction, msg, redirectPath, queryTerm, timeout, delayBeforeLeave }) {\r\n\r\n  const location = useLocation()\r\n  const history = useHistory()\r\n  const [modal, setModal] = React.useState(false)\r\n  const [slide, setSlide] = React.useState(null)\r\n  \r\n  React.useEffect(() => {\r\n    if (location) {\r\n      let search = location.search.substr(1, location.search.length)\r\n      let params = search.split('=')\r\n      if (params) {\r\n        let key = params[0]\r\n        let value = params[1]\r\n        if (key && value) {\r\n          console.log(key, value)\r\n          if (key === queryTerm) {\r\n            if (value === 'complete') {\r\n              setModal(true) // maybe replace this with react toast lib\r\n              setTimeout(() => setSlide('in'), 50)\r\n              setTimeout(() => {\r\n                setSlide('out')\r\n              }, delayBeforeLeave)\r\n              setTimeout(() => {\r\n                if (redirectPath) {\r\n                  history.push(redirectPath)\r\n                }\r\n                doAction()\r\n                setModal(false)\r\n              }, timeout)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [location])\r\n  \r\n  return (\r\n    <>\r\n    {\r\n      modal ?\r\n        <>\r\n            <ModalDiv_SlideIn slide={ slide }>\r\n              {msg}\r\n            </ModalDiv_SlideIn>\r\n        </>\r\n      :\r\n        <></>\r\n    }\r\n    </>\r\n  )\r\n}\r\n\r\nexport { ActionModal }","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\AppHeader.js",[],"C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\ProfileDataPage.js",[],"C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\BugerButton.js",["122"],"import React from 'react'\r\nimport StyledButton from './StyledButton'\r\n\r\nexport default ({ doAction }) => (\r\n    <StyledButton\r\n    onClick={doAction}\r\n    style={{ position: 'absolute', left: '14px', top: '7px', width: '50px', fontSize: '24px' }}\r\n    >\r\n      &equiv;\r\n    </StyledButton>\r\n)\r\n","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\LogoutTimer.js",["123","124"],"import React from 'react'\r\nimport { useAuth0 } from '@auth0/auth0-react'\r\n\r\nexport default function LogoutTimer ({ minutesOfInactivity }) {\r\n\r\n    const { isAuthenticated, logout } = useAuth0()\r\n    const minutes = React.useRef(minutesOfInactivity)\r\n    const seconds = React.useRef(0)\r\n    const timeout = React.useRef(() => setTOut(minutes.current))\r\n    const interval = React.useRef(() => setCountdown(minutes.current))\r\n\r\n    const setTOut = () => {\r\n        // console.log(`logout timeout refreshed, set at ${minutes.current} minute${minutes.current > 1 ? 's' : ''}`)\r\n        return setTimeout(() => {\r\n            console.log(`logging out due to ${minutes.current} of inactivity`)\r\n            // also remove the jwt token from localStorage\r\n            if (localStorage.getItem('gym-app-jwt')) {\r\n                localStorage.removeItem('gym-app-jwt')\r\n            }\r\n            logout({ redirectTo: window.location.origin })\r\n        }, ((1000 * 60) * minutes.current))\r\n    }\r\n\r\n    const setCountdown = () => {\r\n        seconds.current = minutes.current * 60\r\n        return setInterval(() => {\r\n            seconds.current = seconds.current - 1\r\n            let sec = seconds.current % 60\r\n            // console.log(`timer: ${((seconds.current - (seconds.current % 60)) / 60)}:${sec < 10 ? `0${sec}` : sec}`)\r\n        }, 1000)\r\n    }\r\n\r\n    React.useEffect(() => {\r\n\r\n        const mouseMoveHandler = () => {\r\n            if (timeout?.current && interval?.current) {\r\n                clearTimeout(timeout.current)\r\n                clearInterval(interval.current)\r\n            }\r\n            timeout.current = setTOut()\r\n            interval.current = setCountdown()   \r\n        }\r\n\r\n        if (isAuthenticated === true) {\r\n            console.log('authenticated, set a timer to logout automagically, but refresh upon mouse movement')\r\n            window.addEventListener('mousemove', mouseMoveHandler)\r\n            mouseMoveHandler() // fire once to init logout timer\r\n        }\r\n\r\n        return () => {\r\n            window.removeEventListener('mousemove', mouseMoveHandler)\r\n        }\r\n\r\n    }, [isAuthenticated])\r\n\r\n    return <></>\r\n\r\n}","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\CreditCardEntry.js",[],["125","126"],"C:\\Users\\EP\\Documents\\stripe-react\\src\\hooks\\useCreateStripeCustomer.js",["127"],"import React from 'react'\r\nimport { useAuth0 } from '@auth0/auth0-react'\r\nimport useAuthToken from './useAuthToken'\r\n\r\nexport default function useCreateStripeCustomer () {\r\n  \r\n  const { user } = useAuth0()\r\n  const [stripeCustomer, setStripeCustomer] = React.useState(null)\r\n  const jwt = useAuthToken()\r\n\r\n  React.useEffect(() => {\r\n\r\n    if (stripeCustomer) { // once we have both the stripeCustomer and jwt deps.. do..\r\n      // patch stripe customer through to auth0 user \r\n      \r\n      console.log('stripe customer created')\r\n\r\n      if (jwt) {\r\n        \r\n        let status, statusCode\r\n        fetch(`https://gymwebapp.us.auth0.com/api/v2/users/${user.sub}`, {\r\n            method: 'PATCH',\r\n            body: JSON.stringify({\r\n              user_metadata: {\r\n                stripe: {\r\n                  customer: stripeCustomer\r\n                }\r\n              }\r\n            }),\r\n            headers: {\r\n              'content-type': 'application/json',\r\n              'authorization': `Bearer ${jwt.access_token}`\r\n            }\r\n        })\r\n        .then(response => {\r\n          status = response.status\r\n          return response.json()\r\n        })\r\n        .then(data => {\r\n          console.log(data)\r\n          statusCode = data.statusCode ? data.statusCode : null\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n            if (status === 401 || statusCode === 401) {\r\n              if (localStorage.getItem('gym-app-jwt')) {\r\n                localStorage.removeItem('gym-app-jwt')\r\n              }\r\n            }\r\n        })\r\n      }\r\n\r\n    }\r\n\r\n  }, [stripeCustomer, jwt]) // on stripeCustomer or jwt state change.. do..\r\n\r\n  React.useEffect(() => {\r\n\r\n    if (user) {\r\n      console.log(user)\r\n      console.log(\r\n        user.email\r\n      )\r\n\r\n      console.log('hook should create stripe customer')\r\n\r\n      fetch('/create-stripe-customer', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          // email: user.email ? user.email : user.name\r\n          email: user.email\r\n        }),\r\n        headers: {\r\n          'Content-type': 'application/json'\r\n        }\r\n      })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        if (data.value === true) { // if we created a new Stripe customer\r\n          console.log(data)\r\n          let { customer } = data\r\n          setStripeCustomer(customer) // save the stripe api data to auth0 user\r\n        }\r\n      })\r\n      .catch(err => console.log(err))\r\n    }\r\n\r\n  }, [user])\r\n\r\n}",["128","129"],"C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\StripeCardEntryExample.js",["130","131","132","133"],"import React, {useState} from 'react'\r\nimport { CardElement, Elements, useElements, useStripe } from '@stripe/react-stripe-js'\r\nimport './2-Card-Detailed.css'\r\nimport useFetchedUserData from '../hooks/useFetchedUserData';\r\nimport { useAuth0 } from '@auth0/auth0-react';\r\n\r\nconst CARD_OPTIONS = {\r\n  iconStyle: 'solid',\r\n  style: {\r\n    base: {\r\n      iconColor: '#c4f0ff',\r\n      color: '#000',\r\n      fontWeight: 500,\r\n      fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',\r\n      fontSize: '16px',\r\n      fontSmoothing: 'antialiased',\r\n      ':-webkit-autofill': {\r\n        color: '#fce883',\r\n      },\r\n      '::placeholder': {\r\n        color: 'rgba(0, 0, 0, 0.25)',\r\n      },\r\n    },\r\n    invalid: {\r\n      iconColor: '#666',\r\n      color: '#666',\r\n    },\r\n  },\r\n};\r\n\r\nconst CardField = ({onChange}) => (\r\n  <div className=\"FormRow\">\r\n    <CardElement options={CARD_OPTIONS} onChange={onChange} />\r\n  </div>\r\n);\r\n\r\nconst Field = ({\r\n  label,\r\n  id,\r\n  type,\r\n  placeholder,\r\n  required,\r\n  autoComplete,\r\n  value,\r\n  onChange,\r\n}) => (\r\n  <div className=\"FormRow\">\r\n    <label htmlFor={id} className=\"FormRowLabel\">\r\n      {label}\r\n    </label>\r\n    <input\r\n      className=\"FormRowInput\"\r\n      id={id}\r\n      type={type}\r\n      placeholder={placeholder}\r\n      required={required}\r\n      autoComplete={autoComplete}\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n  </div>\r\n);\r\n\r\nconst SubmitButton = ({processing, error, children, disabled}) => (\r\n  <button\r\n    className={`SubmitButton ${error ? 'SubmitButton--error' : ''}`}\r\n    type=\"submit\"\r\n    disabled={processing || disabled}\r\n  >\r\n    {processing ? 'Processing...' : children}\r\n  </button>\r\n);\r\n\r\nconst ErrorMessage = ({children}) => (\r\n  <div className=\"ErrorMessage\" role=\"alert\">\r\n    <svg width=\"16\" height=\"16\" viewBox=\"0 0 17 17\">\r\n      <path\r\n        fill=\"#FFF\"\r\n        d=\"M8.5,17 C3.80557963,17 0,13.1944204 0,8.5 C0,3.80557963 3.80557963,0 8.5,0 C13.1944204,0 17,3.80557963 17,8.5 C17,13.1944204 13.1944204,17 8.5,17 Z\"\r\n      />\r\n      <path\r\n        fill=\"#6772e5\"\r\n        d=\"M8.5,7.29791847 L6.12604076,4.92395924 C5.79409512,4.59201359 5.25590488,4.59201359 4.92395924,4.92395924 C4.59201359,5.25590488 4.59201359,5.79409512 4.92395924,6.12604076 L7.29791847,8.5 L4.92395924,10.8739592 C4.59201359,11.2059049 4.59201359,11.7440951 4.92395924,12.0760408 C5.25590488,12.4079864 5.79409512,12.4079864 6.12604076,12.0760408 L8.5,9.70208153 L10.8739592,12.0760408 C11.2059049,12.4079864 11.7440951,12.4079864 12.0760408,12.0760408 C12.4079864,11.7440951 12.4079864,11.2059049 12.0760408,10.8739592 L9.70208153,8.5 L12.0760408,6.12604076 C12.4079864,5.79409512 12.4079864,5.25590488 12.0760408,4.92395924 C11.7440951,4.59201359 11.2059049,4.59201359 10.8739592,4.92395924 L8.5,7.29791847 L8.5,7.29791847 Z\"\r\n      />\r\n    </svg>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nconst ResetButton = ({onClick}) => (\r\n  <button type=\"button\" className=\"ResetButton\" onClick={onClick}>\r\n    <svg width=\"32px\" height=\"32px\" viewBox=\"0 0 32 32\">\r\n      <path\r\n        fill=\"#FFF\"\r\n        d=\"M15,7.05492878 C10.5000495,7.55237307 7,11.3674463 7,16 C7,20.9705627 11.0294373,25 16,25 C20.9705627,25 25,20.9705627 25,16 C25,15.3627484 24.4834055,14.8461538 23.8461538,14.8461538 C23.2089022,14.8461538 22.6923077,15.3627484 22.6923077,16 C22.6923077,19.6960595 19.6960595,22.6923077 16,22.6923077 C12.3039405,22.6923077 9.30769231,19.6960595 9.30769231,16 C9.30769231,12.3039405 12.3039405,9.30769231 16,9.30769231 L16,12.0841673 C16,12.1800431 16.0275652,12.2738974 16.0794108,12.354546 C16.2287368,12.5868311 16.5380938,12.6540826 16.7703788,12.5047565 L22.3457501,8.92058924 L22.3457501,8.92058924 C22.4060014,8.88185624 22.4572275,8.83063012 22.4959605,8.7703788 C22.6452866,8.53809377 22.5780351,8.22873685 22.3457501,8.07941076 L22.3457501,8.07941076 L16.7703788,4.49524351 C16.6897301,4.44339794 16.5958758,4.41583275 16.5,4.41583275 C16.2238576,4.41583275 16,4.63969037 16,4.91583275 L16,7 L15,7 L15,7.05492878 Z M16,32 C7.163444,32 0,24.836556 0,16 C0,7.163444 7.163444,0 16,0 C24.836556,0 32,7.163444 32,16 C32,24.836556 24.836556,32 16,32 Z\"\r\n      />\r\n    </svg>\r\n  </button>\r\n);\r\n\r\nexport default function StripeCardEntryExample () {\r\n\r\n  const stripe = useStripe()\r\n  const elements = useElements()\r\n  const fetchedUser = useFetchedUserData() // my hook \r\n  const { isLoading, isAuthenticated } = useAuth0()\r\n  const [error, setError] = useState(null)\r\n  const [cardComplete, setCardComplete] = useState(false)\r\n  const [processing, setProcessing] = useState(false)\r\n  const [paymentMethod, setPaymentMethod] = useState(null)\r\n  const [billingDetails, setBillingDetails] = useState({\r\n    email: '',\r\n    phone: '',\r\n    name: '',\r\n  })\r\n  const [keepBillingDetails, setKeepBillingDetails] = useState(true)\r\n\r\n  React.useEffect(() => {\r\n    if (fetchedUser) {\r\n        setBillingDetails({\r\n            email: fetchedUser.email,\r\n            phone: fetchedUser.user_metadata?.mobile ? fetchedUser.user_metadata.mobile : '',\r\n            name: fetchedUser?.given_name && fetchedUser?.family_name ? fetchedUser.given_name + ' ' + fetchedUser.family_name : 'user'\r\n        })\r\n    }\r\n  }, [fetchedUser])\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault()\r\n    if (fetchedUser?.user_metadata?.stripe?.customer) {\r\n        // console.log( fetchedUser.user_metadata.stripe.customer.id )\r\n        \r\n        if (!stripe || !elements) {\r\n            // Stripe.js has not loaded yet. Make sure to disable\r\n            // form submission until Stripe.js has loaded.\r\n            return\r\n        }\r\n    \r\n        if (error) {\r\n            elements.getElement('card').focus()\r\n            return\r\n        }\r\n    \r\n        if (cardComplete) {\r\n            setProcessing(true)\r\n        }\r\n    \r\n        const payload = await stripe.createPaymentMethod({\r\n            type: 'card',\r\n            card: elements.getElement(CardElement),\r\n            customer: fetchedUser.user_metadata.stripe.customer.id,\r\n            billing_details: billingDetails,\r\n        })\r\n    \r\n        setProcessing(false)\r\n    \r\n        if (payload.error) {\r\n            setError(payload.error)\r\n        } else {\r\n            setPaymentMethod(payload.paymentMethod)\r\n        }\r\n        \r\n        // maybe we'll try using the api directly, let call a route on our backend..\r\n        // const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n        //     type: 'card',\r\n        //     customer: fetchedUser.user_metadata.stripe.customer.id,\r\n        //     card: elements.getElement(CardElement)\r\n        // })\r\n\r\n        // my backend route \r\n        if (!error) {\r\n            console.log(payload.paymentMethod)\r\n            fetch('/attach-payment-method', {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    paymentMethod: payload.paymentMethod,\r\n                    customer: fetchedUser.user_metadata.stripe.customer\r\n                }),\r\n                headers: { 'Content-type': 'application/json' }\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data)\r\n\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n        } else {\r\n            console.log(error)\r\n        }\r\n\r\n    } else {\r\n        console.log('stripe customer id data not found in auth0 user object')\r\n    }\r\n}\r\n\r\n//   const handleSubmit = async (event) => {\r\n//     event.preventDefault();\r\n\r\n//     if (!stripe || !elements) {\r\n//       // Stripe.js has not loaded yet. Make sure to disable\r\n//       // form submission until Stripe.js has loaded.\r\n//       return;\r\n//     }\r\n\r\n//     if (error) {\r\n//       elements.getElement('card').focus();\r\n//       return;\r\n//     }\r\n\r\n//     if (cardComplete) {\r\n//       setProcessing(true);\r\n//     }\r\n\r\n//     const payload = await stripe.createPaymentMethod({\r\n//       type: 'card',\r\n//       card: elements.getElement(CardElement),\r\n//       billing_details: billingDetails,\r\n//     });\r\n\r\n//     setProcessing(false);\r\n\r\n//     if (payload.error) {\r\n//       setError(payload.error);\r\n//     } else {\r\n//       setPaymentMethod(payload.paymentMethod);\r\n//     }\r\n//   };\r\n\r\n  const reset = () => {\r\n    setError(null);\r\n    setProcessing(false);\r\n    setPaymentMethod(null);\r\n    setBillingDetails({\r\n      email: '',\r\n      phone: '',\r\n      name: '',\r\n    });\r\n  };\r\n\r\n  return (\r\n      paymentMethod ? (\r\n        <div className=\"Result\">\r\n        <div className=\"ResultTitle\" role=\"alert\">\r\n            Payment successful\r\n        </div>\r\n        <div className=\"ResultMessage\">\r\n            Thanks for trying Stripe Elements. No money was charged, but we\r\n            generated a PaymentMethod: {paymentMethod.id}\r\n        </div>\r\n        {/* <ResetButton onClick={reset} /> */}\r\n        <div>\r\n            make our own reset button or redirect to /route on the SPA\r\n        </div>\r\n        </div>\r\n    ) : (<>\r\n        <>\r\n            {\r\n                fetchedUser && fetchedUser.family_name && fetchedUser.given_name && fetchedUser?.user_metadata?.mobile ?\r\n                <>\r\n                    <>\r\n                        <br />\r\n                        {\r\n                            keepBillingDetails === true ?\r\n                            <>\r\n                                <div>Keeping current user billing info:</div>\r\n                                <br />\r\n                                <button\r\n                                onClick={() => setKeepBillingDetails(false)}\r\n                                >\r\n                                    Change Billing Info\r\n                                </button>\r\n                                <br />\r\n                                <br />\r\n                                {\r\n                                    fetchedUser ?\r\n                                    <>\r\n                                        <div>{fetchedUser?.given_name && fetchedUser?.family_name ? fetchedUser.given_name + ' ' + fetchedUser.family_name : 'no name set in profile'}</div>\r\n                                        <div>{fetchedUser?.email ? fetchedUser.email : ''}</div>\r\n                                        <div>{fetchedUser?.user_metadata?.mobile ? fetchedUser.user_metadata.mobile : 'no mobile number set in profile'}</div>\r\n                                    </>\r\n                                    : <></>\r\n                                }\r\n                            </>\r\n                            :\r\n                            <>\r\n                                <div></div>\r\n                                <button\r\n                                onClick={() => {\r\n                                    if (fetchedUser) {\r\n                                        setBillingDetails({\r\n                                            email: fetchedUser.email,\r\n                                            phone: fetchedUser.user_metadata?.mobile ? fetchedUser.user_metadata.mobile : '',\r\n                                            name: fetchedUser?.given_name && fetchedUser?.family_name ? fetchedUser.given_name + ' ' + fetchedUser.family_name : 'user'\r\n                                        })\r\n                                        setKeepBillingDetails(true)\r\n                                    }\r\n                                }}\r\n                                >\r\n                                    Cancel\r\n                                </button>\r\n                            </>\r\n                        }\r\n                    </>\r\n                    <div id='form-container'>\r\n                        <form className=\"Form\" onSubmit={handleSubmit}>\r\n                            {\r\n                                keepBillingDetails === false ?\r\n                                <fieldset className=\"FormGroup\">\r\n                                    <Field\r\n                                    label=\"Name\"\r\n                                    id=\"name\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"Jane Doe\"\r\n                                    required\r\n                                    autoComplete=\"name\"\r\n                                    value={billingDetails.name}\r\n                                    onChange={(e) => {\r\n                                        setBillingDetails({...billingDetails, name: e.target.value});\r\n                                    }}\r\n                                    />\r\n                                    <Field\r\n                                    label=\"Email\"\r\n                                    id=\"email\"\r\n                                    type=\"email\"\r\n                                    placeholder=\"janedoe@gmail.com\"\r\n                                    required\r\n                                    autoComplete=\"email\"\r\n                                    value={billingDetails.email}\r\n                                    onChange={(e) => {\r\n                                        setBillingDetails({...billingDetails, email: e.target.value});\r\n                                    }}\r\n                                    />\r\n                                    <Field\r\n                                    label=\"Phone\"\r\n                                    id=\"phone\"\r\n                                    type=\"tel\"\r\n                                    placeholder=\"(941) 555-0123\"\r\n                                    required\r\n                                    autoComplete=\"tel\"\r\n                                    value={billingDetails.phone}\r\n                                    onChange={(e) => {\r\n                                        setBillingDetails({...billingDetails, phone: e.target.value});\r\n                                    }}\r\n                                    />\r\n                                </fieldset>\r\n                                : <></>\r\n                            }\r\n                        <fieldset className=\"FormGroup\">\r\n                            <CardField\r\n                            onChange={(e) => {\r\n                                setError(e.error);\r\n                                setCardComplete(e.complete);\r\n                            }}\r\n                            />\r\n                        </fieldset>\r\n                        {error && <ErrorMessage>{error.message}</ErrorMessage>}\r\n                        <div\r\n                        style={{\r\n                          width: '300px',\r\n                          position: 'absolute',\r\n                          left: 0, right: 0,\r\n                          margin: 'auto'\r\n                        }}\r\n                        >\r\n                          <SubmitButton processing={processing} error={error} disabled={!stripe}>\r\n                              Create Payment Method\r\n                          </SubmitButton>\r\n                        </div>\r\n                        </form>\r\n                    </div>\r\n                </>\r\n                :\r\n                <>  \r\n                    {\r\n                        fetchedUser && isAuthenticated === true ?\r\n                            isLoading ?\r\n                            null\r\n                            :\r\n                            <>\r\n                                <br />\r\n                                <div>Please update your profile info with your full name and mobile phone before adding a payment method</div>\r\n                            </>\r\n                        : null\r\n                    }\r\n                </>\r\n            }\r\n        </>\r\n    </>)\r\n  )\r\n}\r\n\r\nconst ELEMENTS_OPTIONS = {\r\n  fonts: [\r\n    {\r\n      cssSrc: 'https://fonts.googleapis.com/css?family=Roboto',\r\n    },\r\n  ],\r\n};\r\n\r\n// export default StripeCardEntryExample\r\n\r\n// Make sure to call `loadStripe` outside of a component’s render to avoid\r\n// recreating the `Stripe` object on every render.\r\n// const stripePromise = loadStripe('pk_test_6pRNASCoBOKtIshFeQd4XMUh');\r\n\r\n// const App = () => {\r\n//   return (\r\n//     <div className=\"AppWrapper\">\r\n//       <Elements stripe={stripePromise} options={ELEMENTS_OPTIONS}>\r\n//         <CheckoutForm />\r\n//       </Elements>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;",{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":1,"column":1,"nodeType":"140","endLine":122,"endColumn":3},{"ruleId":"134","replacedBy":"141"},{"ruleId":"136","replacedBy":"142"},{"ruleId":"138","severity":1,"message":"139","line":1,"column":1,"nodeType":"140","endLine":3,"endColumn":3},{"ruleId":"143","severity":1,"message":"144","line":87,"column":21,"nodeType":"145","messageId":"146","endLine":87,"endColumn":25},{"ruleId":"147","severity":1,"message":"148","line":104,"column":8,"nodeType":"149","endLine":104,"endColumn":27,"suggestions":"150"},{"ruleId":"138","severity":1,"message":"139","line":35,"column":1,"nodeType":"140","endLine":66,"endColumn":2},{"ruleId":"151","severity":1,"message":"152","line":60,"column":13,"nodeType":"153","endLine":63,"endColumn":15},{"ruleId":"154","severity":1,"message":"155","line":95,"column":36,"nodeType":"156","messageId":"157","endLine":95,"endColumn":38},{"ruleId":"147","severity":1,"message":"158","line":36,"column":8,"nodeType":"149","endLine":36,"endColumn":25,"suggestions":"159"},{"ruleId":"160","severity":1,"message":"161","line":98,"column":29,"nodeType":"162","messageId":"163","endLine":98,"endColumn":31},{"ruleId":"160","severity":1,"message":"161","line":99,"column":78,"nodeType":"162","messageId":"163","endLine":99,"endColumn":80},{"ruleId":"147","severity":1,"message":"164","line":57,"column":6,"nodeType":"149","endLine":57,"endColumn":16,"suggestions":"165"},{"ruleId":"166","severity":1,"message":"167","line":64,"column":13,"nodeType":"153","endLine":64,"endColumn":47},{"ruleId":"138","severity":1,"message":"139","line":4,"column":1,"nodeType":"140","endLine":11,"endColumn":2},{"ruleId":"143","severity":1,"message":"168","line":28,"column":17,"nodeType":"145","messageId":"146","endLine":28,"endColumn":20},{"ruleId":"147","severity":1,"message":"169","line":54,"column":8,"nodeType":"149","endLine":54,"endColumn":25,"suggestions":"170"},{"ruleId":"134","replacedBy":"171"},{"ruleId":"136","replacedBy":"172"},{"ruleId":"147","severity":1,"message":"173","line":55,"column":6,"nodeType":"149","endLine":55,"endColumn":27,"suggestions":"174"},{"ruleId":"134","replacedBy":"175"},{"ruleId":"136","replacedBy":"176"},{"ruleId":"143","severity":1,"message":"177","line":2,"column":23,"nodeType":"145","messageId":"146","endLine":2,"endColumn":31},{"ruleId":"143","severity":1,"message":"178","line":90,"column":7,"nodeType":"145","messageId":"146","endLine":90,"endColumn":18},{"ruleId":"143","severity":1,"message":"179","line":231,"column":9,"nodeType":"145","messageId":"146","endLine":231,"endColumn":14},{"ruleId":"143","severity":1,"message":"180","line":394,"column":7,"nodeType":"145","messageId":"146","endLine":394,"endColumn":23},"no-native-reassign",["181"],"no-negated-in-lhs",["182"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["181"],["182"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'history' and 'location.search'. Either include them or remove the dependency array.","ArrayExpression",["183"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook React.useEffect has a missing dependency: 'jwt'. Either include it or remove the dependency array.",["184"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","React Hook React.useEffect has missing dependencies: 'delayBeforeLeave', 'doAction', 'history', 'queryTerm', 'redirectPath', and 'timeout'. Either include them or remove the dependency array. If 'doAction' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["185"],"react/jsx-pascal-case","Imported JSX component ModalDiv_SlideIn must be in PascalCase or SCREAMING_SNAKE_CASE","'sec' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'setTOut'. Either include it or remove the dependency array.",["186"],["181"],["182"],"React Hook React.useEffect has a missing dependency: 'user.sub'. Either include it or remove the dependency array.",["187"],["181"],["182"],"'Elements' is defined but never used.","'ResetButton' is assigned a value but never used.","'reset' is assigned a value but never used.","'ELEMENTS_OPTIONS' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},"Update the dependencies array to be: [history, isAuthenticated, location.search]",{"range":"198","text":"199"},"Update the dependencies array to be: [isAuthenticated, jwt]",{"range":"200","text":"201"},"Update the dependencies array to be: [delayBeforeLeave, doAction, history, location, queryTerm, redirectPath, timeout]",{"range":"202","text":"203"},"Update the dependencies array to be: [isAuthenticated, setTOut]",{"range":"204","text":"205"},"Update the dependencies array to be: [stripeCustomer, jwt, user.sub]",{"range":"206","text":"207"},[3736,3755],"[history, isAuthenticated, location.search]",[1431,1448],"[isAuthenticated, jwt]",[1725,1735],"[delayBeforeLeave, doAction, history, location, queryTerm, redirectPath, timeout]",[2113,2130],"[isAuthenticated, setTOut]",[1593,1614],"[stripeCustomer, jwt, user.sub]"]