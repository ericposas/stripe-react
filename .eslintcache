[{"C:\\Users\\EP\\Documents\\stripe-react\\src\\index.js":"1","C:\\Users\\EP\\Documents\\stripe-react\\src\\App.js":"2","C:\\Users\\EP\\Documents\\stripe-react\\src\\reportWebVitals.js":"3","C:\\Users\\EP\\Documents\\stripe-react\\src\\itemsList.js":"4","C:\\Users\\EP\\Documents\\stripe-react\\src\\productsList.js":"5","C:\\Users\\EP\\Documents\\stripe-react\\src\\Success.js":"6","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\StyledButton.js":"7","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\ProductBox.js":"8","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\Checkout.js":"9","C:\\Users\\EP\\Documents\\stripe-react\\src\\hooks\\useFetchedUserData.js":"10","C:\\Users\\EP\\Documents\\stripe-react\\src\\utils\\utils.js":"11","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\UpdateUserDataForm.js":"12","C:\\Users\\EP\\Documents\\stripe-react\\src\\hooks\\useAuthToken.js":"13"},{"size":735,"mtime":1611682596830,"results":"14","hashOfConfig":"15"},{"size":9300,"mtime":1611802084053,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":2537,"mtime":1611467539130,"results":"18","hashOfConfig":"15"},{"size":57,"mtime":1611472459384,"results":"19","hashOfConfig":"15"},{"size":1887,"mtime":1611776387695,"results":"20","hashOfConfig":"15"},{"size":448,"mtime":1611614877316,"results":"21","hashOfConfig":"15"},{"size":1677,"mtime":1611626131223,"results":"22","hashOfConfig":"15"},{"size":3798,"mtime":1611715119455,"results":"23","hashOfConfig":"15"},{"size":847,"mtime":1611784856413,"results":"24","hashOfConfig":"15"},{"size":335,"mtime":1611780186530,"results":"25","hashOfConfig":"15"},{"size":8889,"mtime":1611785175034,"results":"26","hashOfConfig":"15"},{"size":1352,"mtime":1611775909829,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1d30jjv",{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"30"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"30"},"C:\\Users\\EP\\Documents\\stripe-react\\src\\index.js",[],["64","65"],"C:\\Users\\EP\\Documents\\stripe-react\\src\\App.js",["66","67"],"C:\\Users\\EP\\Documents\\stripe-react\\src\\reportWebVitals.js",[],"C:\\Users\\EP\\Documents\\stripe-react\\src\\itemsList.js",["68"],"export default () => ([\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Gummy Bears'\r\n            },\r\n            unit_amount: 100\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Camisa'\r\n            },\r\n            unit_amount: 2500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Shirt'\r\n            },\r\n            unit_amount: 2000\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Pants'\r\n            },\r\n            unit_amount: 3500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Shoes'\r\n            },\r\n            unit_amount: 7500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Jacket'\r\n            },\r\n            unit_amount: 18500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Flops'\r\n            },\r\n            unit_amount: 1000\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Hat'\r\n            },\r\n            unit_amount: 1500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Suit'\r\n            },\r\n            unit_amount: 25500\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Tie'\r\n            },\r\n            unit_amount: 4000\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Dress Shoes'\r\n            },\r\n            unit_amount: 12000\r\n        },\r\n        quantity: 1\r\n    },\r\n    {\r\n        price_data: {\r\n            currency: 'usd',\r\n            product_data: {\r\n                name: 'Nikes'\r\n            },\r\n            unit_amount: 35500\r\n        },\r\n        quantity: 1\r\n    },\r\n])\r\n",["69","70"],"C:\\Users\\EP\\Documents\\stripe-react\\src\\productsList.js",["71"],"export default () => ([\r\n    'prod_IofQI7lk3rL1Qq',\r\n])\r\n","C:\\Users\\EP\\Documents\\stripe-react\\src\\Success.js",["72"],"import React from 'react'\r\nimport { useLocation, useHistory } from 'react-router-dom'\r\nimport { useAuth0 } from '@auth0/auth0-react'\r\nimport UpdateUserDataForm from './components/UpdateUserDataForm'\r\n\r\nexport default function SuccessPage () {\r\n\r\n    const location = useLocation()\r\n    const history = useHistory()\r\n    const { isLoading, isAuthenticated } = useAuth0()\r\n\r\n    React.useEffect(() => {\r\n        // get session data to populate form fields\r\n        let session_id\r\n        if (location.search) {\r\n            session_id = location.search.split('=')[1]\r\n        }\r\n        if (session_id) {\r\n\r\n            if (isAuthenticated === true) {\r\n\r\n                // get stripe customer data \r\n                fetch('/get-checkout-session', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ session_id }),\r\n                        headers: { 'Content-type': 'application/json' }\r\n                })\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    let { customer } = data\r\n                    console.log('stripe-customer-data:', customer)\r\n                })\r\n                .catch(err => console.log(err))\r\n\r\n            }\r\n\r\n        } else {\r\n            // redirect to home\r\n            history.push('/')\r\n        }\r\n\r\n    }, [ isAuthenticated ])\r\n\r\n    const markup = () => (\r\n        <>\r\n            <br />\r\n            <div>\r\n                Payment was successful! Please finish setting up your profile\r\n            </div>\r\n            <br />\r\n            <UpdateUserDataForm submitLabel={ 'Complete Enrollment' } />\r\n        </>\r\n    )\r\n\r\n    return (\r\n        <>\r\n        {\r\n            isLoading\r\n            ? <><br /><div>Loading...</div></>\r\n            :\r\n                isAuthenticated\r\n                ? markup()\r\n                : null\r\n        }\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\StyledButton.js",[],"C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\ProductBox.js",["73","74"],"import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledProductBoxDiv = styled.div`\r\nuser-select: none;\r\nalign-items: center;\r\nborder: 2px solid slateblue;\r\ncolor: darkslateblue;\r\nborder-radius: 3px;\r\npadding: 20px;\r\nwidth: 300px;\r\nposition: absolute;\r\nmargin: auto;\r\nleft: 0;\r\nright: 0;\r\ntransform: scale(1.00);\r\ntransition: all .35s;\r\ncursor: pointer;\r\n&:hover {\r\n    transform: scale(1.05);\r\n    transition: all .35s;\r\n}\r\n`\r\n\r\nexport const convertToDollar = priceNum => {\r\n    let amt = priceNum.toString()\r\n    let dollarAmt = amt.split('')\r\n    dollarAmt.pop()\r\n    dollarAmt.pop()\r\n    dollarAmt.push('.00')\r\n    dollarAmt = dollarAmt.join('')\r\n    return dollarAmt\r\n}\r\n\r\nexport default ({ product, itemsChecked, updateCart }) => (\r\n    <>\r\n        <StyledProductBoxDiv\r\n        onClick={() => { updateCart(product) }}\r\n        >\r\n            <span>\r\n                <div key={product.id}>\r\n                { product.name }\r\n                </div>\r\n                <div>\r\n                { product.statement_descriptor }\r\n                </div>\r\n                <div>\r\n                ${ convertToDollar( product.metadata.price ) }\r\n                </div>\r\n                <input\r\n                style={{\r\n                    position: 'relative',\r\n                    right: '20px'\r\n                }}\r\n                type='checkbox'\r\n                checked={itemsChecked[product.id]}\r\n                onChange={() => { updateCart(product) }}\r\n                />\r\n            </span>\r\n            <img\r\n            style={{ 'width': '100px' }}\r\n            src={ product.images[0] }\r\n            />\r\n        </StyledProductBoxDiv>\r\n    </>\r\n)","C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\Checkout.js",["75"],"import React from 'react'\r\nimport { isEqual } from 'lodash'\r\nimport { loadStripe } from '@stripe/stripe-js'\r\nimport StyledButton from './StyledButton'\r\nimport ProductBox from './ProductBox'\r\nimport { useAuth0 } from '@auth0/auth0-react'\r\n\r\nconst stripePromise = loadStripe(process.env.REACT_APP_STRIPE_TEST_PUB_KEY)\r\n\r\nexport default function Checkout () {\r\n\r\n    const [products, setProducts] = React.useState(null)\r\n  \r\n    React.useEffect(() => {\r\n  \r\n      let response = fetch('/get-list-of-products', {\r\n        method: 'GET'\r\n      })\r\n      .then(response => response.json())\r\n      .catch(err => console.log(err))\r\n      \r\n      response\r\n      .then(data => {\r\n        setProducts(data.products)\r\n      })\r\n      .catch(err => console.log(err))\r\n  \r\n    }, [])\r\n  \r\n    const handleClick = async event => {\r\n  \r\n      if (shoppingCart.length > 0) {\r\n  \r\n        // Get Stripe.js instance\r\n        const stripe = await stripePromise\r\n        // Call your backend to create the Checkout Session\r\n        const response = await fetch('/create-checkout-session', {\r\n          method: 'POST',\r\n          body: JSON.stringify({\r\n            line_items: shoppingCart\r\n          }),\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        })\r\n        const session = await response.json()\r\n        // When the customer clicks on the button, redirect them to the Checkout \r\n        const result = await stripe.redirectToCheckout({\r\n          sessionId: session.id\r\n        })\r\n    \r\n        if (result.error) {\r\n          // If `redirectToCheckout` fails due to a browser or network\r\n          // error, display the localized error message to your customer\r\n          // using `result.error.message`.\r\n        }\r\n  \r\n      } else {\r\n        console.log(\r\n          'there is nothing in your shopping cart'\r\n        )\r\n      }\r\n  \r\n    }\r\n  \r\n    const [itemsChecked, setItemsChecked] = React.useState({})\r\n    const [shoppingCart, setShoppingCart] = React.useState([])\r\n  \r\n    const updateCart = product => {\r\n      setItemsChecked({\r\n        [product.id]: !itemsChecked[product.id]\r\n      })\r\n  \r\n      let inCart = false\r\n      let itemToAdd = { price: product.metadata.price_id, quantity: 1 }\r\n      shoppingCart.forEach(item => {\r\n        if (isEqual(item, itemToAdd)) {\r\n          inCart = true\r\n        }\r\n      })\r\n  \r\n      if (!inCart) {\r\n        setShoppingCart(() => ([\r\n          ...shoppingCart,\r\n          itemToAdd\r\n        ]))\r\n      } else {\r\n        setShoppingCart(() => (\r\n          shoppingCart.filter(item => {\r\n            if (!isEqual(item, itemToAdd)) {\r\n              return item\r\n            }\r\n          })\r\n        ))\r\n      }\r\n  \r\n    }\r\n\r\n    const markup = () => (\r\n        <>\r\n        <br />\r\n        <div>\r\n          Enroll in Classes\r\n        </div>\r\n        <br />\r\n        <div>\r\n          {\r\n            products ?\r\n            products\r\n            .map(product => (\r\n              <ProductBox\r\n              itemsChecked={itemsChecked}\r\n              updateCart={updateCart}\r\n              product={product}\r\n              />\r\n            ))\r\n            : null\r\n          }\r\n        </div>\r\n        <br />\r\n        <StyledButton\r\n        style={{\r\n          left: 0,\r\n          right: 0,\r\n          bottom: '40px',\r\n          position: 'absolute',\r\n          margin: 'auto'\r\n        }}\r\n        type='button' role='link'\r\n        onClick={handleClick}>\r\n          Checkout\r\n        </StyledButton>\r\n      </>\r\n    )\r\n\r\n    const { isAuthenticated, isLoading } = useAuth0()\r\n  \r\n    return (\r\n        <>\r\n        {\r\n            isLoading\r\n            ? <><br/><div>Loading...</div></>\r\n            :\r\n                isAuthenticated\r\n                ? markup()\r\n                : null\r\n        }\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\EP\\Documents\\stripe-react\\src\\hooks\\useFetchedUserData.js",[],"C:\\Users\\EP\\Documents\\stripe-react\\src\\utils\\utils.js",[],["76","77"],"C:\\Users\\EP\\Documents\\stripe-react\\src\\components\\UpdateUserDataForm.js",["78"],"import React from 'react'\r\nimport './UpdateUserDataForm.css'\r\nimport validator from 'validator'\r\nimport StyledButton from './StyledButton'\r\nimport awesomePhonenumber from 'awesome-phonenumber'\r\nimport { isGoogleAccount } from '../utils/utils'\r\nimport { useAuth0 } from '@auth0/auth0-react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport useFetchedUserData from '../hooks/useFetchedUserData'\r\nimport { isEqual } from 'lodash'\r\n\r\nexport default function UpdateUserDataForm ({ submitLabel }) {\r\n\r\n    const { user, isAuthenticated } = useAuth0()\r\n    const history = useHistory()\r\n    const fetchedUserData = useFetchedUserData()\r\n    const [firstNameField, setFirstNameField] = React.useState('')\r\n    const [lastNameField, setLastNameField] = React.useState('')\r\n    const [emailField, setEmailField] = React.useState('')\r\n    const [phoneField, setPhoneField] = React.useState('')\r\n    \r\n    React.useEffect(() => {\r\n        if (user && fetchedUserData) {\r\n            if (!isGoogleAccount(user)) {\r\n                setFirstNameField(fetchedUserData?.given_name ? fetchedUserData.given_name : '')\r\n                setLastNameField(fetchedUserData?.given_name ? fetchedUserData.family_name : '')\r\n                setEmailField(fetchedUserData?.email ? fetchedUserData.email : '')\r\n            }\r\n            setPhoneField(fetchedUserData?.user_metadata?.mobile ? fetchedUserData.user_metadata.mobile : '')\r\n        }\r\n    }, [fetchedUserData, user])\r\n\r\n    const allFieldsValid = () => {\r\n        if (\r\n            !validator.isEmpty(firstNameField) && !validator.isEmpty(lastNameField) &&\r\n            validator.isMobilePhone(phoneField) &&\r\n            validator.isEmail(emailField)\r\n            ) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        if ((allFieldsValid() || (isGoogleAccount(user) && validator.isMobilePhone(phoneField))) && localStorage.getItem('gym-app-jwt')) {\r\n            let jwt = JSON.parse(localStorage.getItem('gym-app-jwt'))['access_token']\r\n            let bodyShape = {\r\n                user_metadata: {\r\n                    mobile: phoneField\r\n                },\r\n            }\r\n            if (!isGoogleAccount(user)) {\r\n                bodyShape.given_name = firstNameField\r\n                bodyShape.family_name = lastNameField\r\n                if (emailField !== user.email) {\r\n                    bodyShape.email = emailField\r\n                }\r\n                // bodyShape.email = emailField //-- email field triggers an auto-logout bc auth0 needs to reverify credentials\r\n            }\r\n            if (localStorage.getItem('gym-app-jwt')) {\r\n                let status, statusCode\r\n                fetch(`https://gymwebapp.us.auth0.com/api/v2/users/${user.sub}`, {\r\n                    method: 'PATCH',\r\n                    body: JSON.stringify(bodyShape),\r\n                    headers: { 'content-type': 'application/json', 'authorization': `Bearer ${jwt}` }\r\n                })\r\n                .then(response => {\r\n                    console.log(\r\n                        response\r\n                    )\r\n                    status = response.status\r\n                    return response.json()\r\n                })\r\n                .then(data => {\r\n                    console.log(data)\r\n                    statusCode = data.statusCode ? data.statusCode : null\r\n                    setTimeout(() => {\r\n                        history.push('/?profileSetup=complete')\r\n                    }, 1000)\r\n                })\r\n                .catch(err => {\r\n                    // should we do another fetch to invalidate the jwt here in\r\n                    // the case of a 401 error?\r\n                    if (status === 401 || statusCode === 401) {\r\n                        console.log(\r\n                            `Bad token, need to make a call to invalidate it\r\n                            and subsequently clear jwt from localStorage or db,\r\n                            wherever we have saved it`\r\n                        )\r\n                        console.log(`\r\n                            alternatively, we can just make sure that we delete\r\n                            the jwt from localStorage or database once the user\r\n                            logs out\r\n                        `)\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            console.log(\r\n                'form contains some invalid fields'\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {\r\n                (user && isGoogleAccount(user)) && (\r\n                    <>\r\n                        <br />\r\n                        <div>Your name and email details are managed by Google</div>\r\n                        <br />\r\n                    </>\r\n                )\r\n            }\r\n            <form\r\n            style={{ height: user && isGoogleAccount(user) ? '110px' : '220px' }}\r\n            className={'Success_form'}\r\n            onSubmit={handleSubmit}>\r\n                {\r\n                    user && user.sub && !isGoogleAccount(user) ?\r\n                    <>\r\n                        <label htmlFor='first-name'>First name: &nbsp;</label>\r\n                        <input\r\n                        id='first-name' type='text'\r\n                        onChange={(event) => {\r\n                            setFirstNameField(event.target.value)\r\n                        }}\r\n                        value={firstNameField}\r\n                        />\r\n                        <div style={{ color: 'red' }} >{ !validator.isEmpty(firstNameField) ? null : 'enter a first name' }\r\n                        </div>\r\n                        <br />\r\n                        <br />\r\n\r\n                        <label htmlFor='last-name'>Last name: &nbsp;</label>\r\n                        <input\r\n                        id='last-name' type='text'\r\n                        onChange={(event) => {\r\n                            setLastNameField(event.target.value)\r\n                        }}\r\n                        value={lastNameField}\r\n                        />\r\n                        <div style={{ color: 'red' }} >{ !validator.isEmpty(lastNameField) ? null : 'enter a last name' }\r\n                        </div>\r\n                        <br />\r\n                        <br />\r\n                    </>\r\n                    : null\r\n                }\r\n\r\n                {\r\n                    user && (\r\n                        <>\r\n                            <label htmlFor='phone'>Mobile number:</label>\r\n                            <input\r\n                            id='phone' type='tel'\r\n                            value={phoneField}\r\n                            onChange={(event) => {\r\n                                setPhoneField(event.target.value)\r\n                            }}\r\n                            />\r\n                            <div style={{ color: 'red' }} > { new awesomePhonenumber(phoneField, 'US').isValid() ? null : 'enter a valid number' }</div>\r\n                            <br />\r\n                            <br />\r\n                        </>\r\n                    )\r\n                }\r\n                \r\n                {\r\n                    (user && user.email && !isGoogleAccount(user)) ?\r\n                        <>\r\n                            <label htmlFor='email'>Email:</label>\r\n                            <input\r\n                            id='email' type='text'\r\n                            value={emailField}\r\n                            onChange={(event) => {\r\n                                setEmailField(event.target.value)\r\n                            }}\r\n                            />\r\n                            <div style={{ color: validator.isEmail(emailField) ? 'green' : 'red' }} >\r\n                                {\r\n                                    !isEqual(emailField, user.email) ?\r\n                                        validator.isEmail(emailField) ?\r\n                                        'requires sign in upon change'\r\n                                        : 'not a valid email'\r\n                                    : ''\r\n                                }\r\n                            </div>\r\n                            <br />\r\n                            <br />\r\n                        </>\r\n                    : 'no user data'\r\n                }\r\n                <br />\r\n                {\r\n                    user &&\r\n                        (allFieldsValid() || (isGoogleAccount(user) && validator.isMobilePhone(phoneField))) ?\r\n                        <StyledButton\r\n                        type='submit' role='button'>\r\n                            { submitLabel }\r\n                        </StyledButton>\r\n                        : null\r\n                }\r\n            </form>\r\n        </>\r\n    )\r\n\r\n}\r\n","C:\\Users\\EP\\Documents\\stripe-react\\src\\hooks\\useAuthToken.js",["79"],"import React from 'react'\r\nimport { useAuth0 } from '@auth0/auth0-react'\r\n\r\nexport default function useAuthToken () {\r\n\r\n    const [jwt, setJwt] = React.useState(null)\r\n    const { isAuthenticated } = useAuth0()\r\n\r\n    React.useEffect(() => {\r\n        console.log(\r\n        'user auth: ', isAuthenticated\r\n        )\r\n        if (isAuthenticated === true) {\r\n        if (window.localStorage && !localStorage.getItem('gym-app-jwt')) {\r\n            fetch('/retrieve-api-token', {\r\n            method: 'POST',\r\n            headers: { 'Content-type': 'application/json' }\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n            console.log(data)\r\n            setJwt(data)\r\n            localStorage.setItem('gym-app-jwt', JSON.stringify(data))\r\n            // we will update this to send the jwt to our mongo db for better security...\r\n            // we will then need to blacklist or invalidate old jwt tokens as well\r\n            // but for now, let's make a request using the jwt! (at Success component)\r\n            // request will be PATCH to update user \r\n            })\r\n            .catch(err => console.log(err))\r\n        } else {\r\n            setJwt(JSON.parse(localStorage.getItem('gym-app-jwt')))\r\n        }\r\n        console.log(jwt)\r\n        }\r\n\r\n    }, [isAuthenticated])\r\n\r\n    return jwt\r\n\r\n}",{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":79,"column":6,"nodeType":"86","endLine":79,"endColumn":16,"suggestions":"87"},{"ruleId":"88","severity":1,"message":"89","line":310,"column":10,"nodeType":"90","messageId":"91","endLine":310,"endColumn":16},{"ruleId":"92","severity":1,"message":"93","line":1,"column":1,"nodeType":"94","endLine":122,"endColumn":3},{"ruleId":"80","replacedBy":"95"},{"ruleId":"82","replacedBy":"96"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":1,"nodeType":"94","endLine":3,"endColumn":3},{"ruleId":"84","severity":1,"message":"97","line":42,"column":8,"nodeType":"86","endLine":42,"endColumn":27,"suggestions":"98"},{"ruleId":"92","severity":1,"message":"93","line":35,"column":1,"nodeType":"94","endLine":66,"endColumn":2},{"ruleId":"99","severity":1,"message":"100","line":60,"column":13,"nodeType":"101","endLine":63,"endColumn":15},{"ruleId":"102","severity":1,"message":"103","line":89,"column":36,"nodeType":"104","messageId":"105","endLine":89,"endColumn":38},{"ruleId":"80","replacedBy":"106"},{"ruleId":"82","replacedBy":"107"},{"ruleId":"88","severity":1,"message":"108","line":14,"column":19,"nodeType":"90","messageId":"91","endLine":14,"endColumn":34},{"ruleId":"84","severity":1,"message":"109","line":36,"column":8,"nodeType":"86","endLine":36,"endColumn":25,"suggestions":"110"},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'doAction' and 'history'. Either include them or remove the dependency array. If 'doAction' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["113"],"no-unused-vars","'GoBack' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["111"],["112"],"React Hook React.useEffect has missing dependencies: 'history' and 'location.search'. Either include them or remove the dependency array.",["114"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["111"],["112"],"'isAuthenticated' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'jwt'. Either include it or remove the dependency array.",["115"],"no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [doAction, history, location]",{"range":"122","text":"123"},"Update the dependencies array to be: [history, isAuthenticated, location.search]",{"range":"124","text":"125"},"Update the dependencies array to be: [isAuthenticated, jwt]",{"range":"126","text":"127"},[2059,2069],"[doAction, history, location]",[1327,1346],"[history, isAuthenticated, location.search]",[1311,1328],"[isAuthenticated, jwt]"]